---------- Input ----------
a
---------- Output ---------
a
---------- AST ------------
ColumnRef {
    span: Some(
        0..1,
    ),
    column: ColumnRef {
        database: None,
        table: None,
        column: Name(
            Identifier {
                span: Some(
                    0..1,
                ),
                name: "a",
                quote: None,
            },
        ),
    },
}


---------- Input ----------
'I''m who I\'m.'
---------- Output ---------
'I\'m who I\'m.'
---------- AST ------------
Literal {
    span: Some(
        0..16,
    ),
    lit: String(
        "I'm who I'm.",
    ),
}


---------- Input ----------
'\776 \n \t \u0053 \xaa'
---------- Output ---------
'Ǿ \n \t S ª'
---------- AST ------------
Literal {
    span: Some(
        0..24,
    ),
    lit: String(
        "Ǿ \n \t S ª",
    ),
}


---------- Input ----------
char(0xD0, 0xBF, 0xD1)
---------- Output ---------
char(208, 191, 209)
---------- AST ------------
FunctionCall {
    span: Some(
        0..22,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..4,
            ),
            name: "char",
            quote: None,
        },
        args: [
            Literal {
                span: Some(
                    5..9,
                ),
                lit: UInt64(
                    208,
                ),
            },
            Literal {
                span: Some(
                    11..15,
                ),
                lit: UInt64(
                    191,
                ),
            },
            Literal {
                span: Some(
                    17..21,
                ),
                lit: UInt64(
                    209,
                ),
            },
        ],
        params: [],
        window: None,
        lambda: None,
    },
}


---------- Input ----------
[42, 3.5, 4., .001, 5e2, 1.925e-3, .38e+7, 1.e-01, 0xfff, x'deedbeef']
---------- Output ---------
[42, 3.5, 4, 0.001, 500, 0.001925, 3800000, 0.1, 4095, 3740122863]
---------- AST ------------
Array {
    span: Some(
        0..70,
    ),
    exprs: [
        Literal {
            span: Some(
                1..3,
            ),
            lit: UInt64(
                42,
            ),
        },
        Literal {
            span: Some(
                5..8,
            ),
            lit: Decimal256 {
                value: 35,
                precision: 76,
                scale: 1,
            },
        },
        Literal {
            span: Some(
                10..12,
            ),
            lit: Decimal256 {
                value: 4,
                precision: 76,
                scale: 0,
            },
        },
        Literal {
            span: Some(
                14..18,
            ),
            lit: Decimal256 {
                value: 1,
                precision: 76,
                scale: 3,
            },
        },
        Literal {
            span: Some(
                20..23,
            ),
            lit: Decimal256 {
                value: 500,
                precision: 76,
                scale: 0,
            },
        },
        Literal {
            span: Some(
                25..33,
            ),
            lit: Decimal256 {
                value: 1925,
                precision: 76,
                scale: 6,
            },
        },
        Literal {
            span: Some(
                35..41,
            ),
            lit: Decimal256 {
                value: 3800000,
                precision: 76,
                scale: 0,
            },
        },
        Literal {
            span: Some(
                43..49,
            ),
            lit: Decimal256 {
                value: 1,
                precision: 76,
                scale: 1,
            },
        },
        Literal {
            span: Some(
                51..56,
            ),
            lit: UInt64(
                4095,
            ),
        },
        Literal {
            span: Some(
                58..69,
            ),
            lit: UInt64(
                3740122863,
            ),
        },
    ],
}


---------- Input ----------
123456789012345678901234567890
---------- Output ---------
123456789012345678901234567890
---------- AST ------------
Literal {
    span: Some(
        0..30,
    ),
    lit: Decimal256 {
        value: 123456789012345678901234567890,
        precision: 76,
        scale: 0,
    },
}


---------- Input ----------
$$ab123c$$
---------- Output ---------
'ab123c'
---------- AST ------------
Literal {
    span: Some(
        0..10,
    ),
    lit: String(
        "ab123c",
    ),
}


---------- Input ----------
x'123456789012345678901234567890'
---------- Output ---------
94522879687365475552814062743484560
---------- AST ------------
Literal {
    span: Some(
        0..33,
    ),
    lit: Decimal256 {
        value: 94522879687365475552814062743484560,
        precision: 76,
        scale: 0,
    },
}


---------- Input ----------
1e100000000000000
---------- Output ---------
inf
---------- AST ------------
Literal {
    span: Some(
        0..17,
    ),
    lit: Float64(
        inf,
    ),
}


---------- Input ----------
100_100_000
---------- Output ---------
100100000
---------- AST ------------
Literal {
    span: Some(
        0..11,
    ),
    lit: UInt64(
        100100000,
    ),
}


---------- Input ----------
1_12200_00
---------- Output ---------
11220000
---------- AST ------------
Literal {
    span: Some(
        0..10,
    ),
    lit: UInt64(
        11220000,
    ),
}


---------- Input ----------
.1
---------- Output ---------
0.1
---------- AST ------------
Literal {
    span: Some(
        0..2,
    ),
    lit: Decimal256 {
        value: 1,
        precision: 76,
        scale: 1,
    },
}


---------- Input ----------
-1
---------- Output ---------
(- 1)
---------- AST ------------
UnaryOp {
    span: Some(
        0..1,
    ),
    op: Minus,
    expr: Literal {
        span: Some(
            1..2,
        ),
        lit: UInt64(
            1,
        ),
    },
}


---------- Input ----------
(1)
---------- Output ---------
1
---------- AST ------------
Literal {
    span: Some(
        1..2,
    ),
    lit: UInt64(
        1,
    ),
}


---------- Input ----------
(1,)
---------- Output ---------
(1,)
---------- AST ------------
Tuple {
    span: Some(
        0..4,
    ),
    exprs: [
        Literal {
            span: Some(
                1..2,
            ),
            lit: UInt64(
                1,
            ),
        },
    ],
}


---------- Input ----------
(1,2)
---------- Output ---------
(1, 2)
---------- AST ------------
Tuple {
    span: Some(
        0..5,
    ),
    exprs: [
        Literal {
            span: Some(
                1..2,
            ),
            lit: UInt64(
                1,
            ),
        },
        Literal {
            span: Some(
                3..4,
            ),
            lit: UInt64(
                2,
            ),
        },
    ],
}


---------- Input ----------
(1,2,)
---------- Output ---------
(1, 2)
---------- AST ------------
Tuple {
    span: Some(
        0..6,
    ),
    exprs: [
        Literal {
            span: Some(
                1..2,
            ),
            lit: UInt64(
                1,
            ),
        },
        Literal {
            span: Some(
                3..4,
            ),
            lit: UInt64(
                2,
            ),
        },
    ],
}


---------- Input ----------
[1]
---------- Output ---------
[1]
---------- AST ------------
Array {
    span: Some(
        0..3,
    ),
    exprs: [
        Literal {
            span: Some(
                1..2,
            ),
            lit: UInt64(
                1,
            ),
        },
    ],
}


---------- Input ----------
[1,]
---------- Output ---------
[1]
---------- AST ------------
Array {
    span: Some(
        0..4,
    ),
    exprs: [
        Literal {
            span: Some(
                1..2,
            ),
            lit: UInt64(
                1,
            ),
        },
    ],
}


---------- Input ----------
[[1]]
---------- Output ---------
[[1]]
---------- AST ------------
Array {
    span: Some(
        0..5,
    ),
    exprs: [
        Array {
            span: Some(
                1..4,
            ),
            exprs: [
                Literal {
                    span: Some(
                        2..3,
                    ),
                    lit: UInt64(
                        1,
                    ),
                },
            ],
        },
    ],
}


---------- Input ----------
[[1],[2]]
---------- Output ---------
[[1], [2]]
---------- AST ------------
Array {
    span: Some(
        0..9,
    ),
    exprs: [
        Array {
            span: Some(
                1..4,
            ),
            exprs: [
                Literal {
                    span: Some(
                        2..3,
                    ),
                    lit: UInt64(
                        1,
                    ),
                },
            ],
        },
        Array {
            span: Some(
                5..8,
            ),
            exprs: [
                Literal {
                    span: Some(
                        6..7,
                    ),
                    lit: UInt64(
                        2,
                    ),
                },
            ],
        },
    ],
}


---------- Input ----------
[[[1,2,3],[4,5,6]],[[7,8,9]]][0][1][2]
---------- Output ---------
[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9]]][0][1][2]
---------- AST ------------
MapAccess {
    span: Some(
        35..38,
    ),
    expr: MapAccess {
        span: Some(
            32..35,
        ),
        expr: MapAccess {
            span: Some(
                29..32,
            ),
            expr: Array {
                span: Some(
                    0..29,
                ),
                exprs: [
                    Array {
                        span: Some(
                            1..18,
                        ),
                        exprs: [
                            Array {
                                span: Some(
                                    2..9,
                                ),
                                exprs: [
                                    Literal {
                                        span: Some(
                                            3..4,
                                        ),
                                        lit: UInt64(
                                            1,
                                        ),
                                    },
                                    Literal {
                                        span: Some(
                                            5..6,
                                        ),
                                        lit: UInt64(
                                            2,
                                        ),
                                    },
                                    Literal {
                                        span: Some(
                                            7..8,
                                        ),
                                        lit: UInt64(
                                            3,
                                        ),
                                    },
                                ],
                            },
                            Array {
                                span: Some(
                                    10..17,
                                ),
                                exprs: [
                                    Literal {
                                        span: Some(
                                            11..12,
                                        ),
                                        lit: UInt64(
                                            4,
                                        ),
                                    },
                                    Literal {
                                        span: Some(
                                            13..14,
                                        ),
                                        lit: UInt64(
                                            5,
                                        ),
                                    },
                                    Literal {
                                        span: Some(
                                            15..16,
                                        ),
                                        lit: UInt64(
                                            6,
                                        ),
                                    },
                                ],
                            },
                        ],
                    },
                    Array {
                        span: Some(
                            19..28,
                        ),
                        exprs: [
                            Array {
                                span: Some(
                                    20..27,
                                ),
                                exprs: [
                                    Literal {
                                        span: Some(
                                            21..22,
                                        ),
                                        lit: UInt64(
                                            7,
                                        ),
                                    },
                                    Literal {
                                        span: Some(
                                            23..24,
                                        ),
                                        lit: UInt64(
                                            8,
                                        ),
                                    },
                                    Literal {
                                        span: Some(
                                            25..26,
                                        ),
                                        lit: UInt64(
                                            9,
                                        ),
                                    },
                                ],
                            },
                        ],
                    },
                ],
            },
            accessor: Bracket {
                key: Literal {
                    span: Some(
                        30..31,
                    ),
                    lit: UInt64(
                        0,
                    ),
                },
            },
        },
        accessor: Bracket {
            key: Literal {
                span: Some(
                    33..34,
                ),
                lit: UInt64(
                    1,
                ),
            },
        },
    },
    accessor: Bracket {
        key: Literal {
            span: Some(
                36..37,
            ),
            lit: UInt64(
                2,
            ),
        },
    },
}


---------- Input ----------
((1 = 1) or 1)
---------- Output ---------
((1 = 1) OR 1)
---------- AST ------------
BinaryOp {
    span: Some(
        9..11,
    ),
    op: Or,
    left: BinaryOp {
        span: Some(
            4..5,
        ),
        op: Eq,
        left: Literal {
            span: Some(
                2..3,
            ),
            lit: UInt64(
                1,
            ),
        },
        right: Literal {
            span: Some(
                6..7,
            ),
            lit: UInt64(
                1,
            ),
        },
    },
    right: Literal {
        span: Some(
            12..13,
        ),
        lit: UInt64(
            1,
        ),
    },
}


---------- Input ----------
typeof(1 + 2)
---------- Output ---------
typeof((1 + 2))
---------- AST ------------
FunctionCall {
    span: Some(
        0..13,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..6,
            ),
            name: "typeof",
            quote: None,
        },
        args: [
            BinaryOp {
                span: Some(
                    9..10,
                ),
                op: Plus,
                left: Literal {
                    span: Some(
                        7..8,
                    ),
                    lit: UInt64(
                        1,
                    ),
                },
                right: Literal {
                    span: Some(
                        11..12,
                    ),
                    lit: UInt64(
                        2,
                    ),
                },
            },
        ],
        params: [],
        window: None,
        lambda: None,
    },
}


---------- Input ----------
- - + + - 1 + + - 2
---------- Output ---------
((- (- (+ (+ (- 1))))) + (+ (- 2)))
---------- AST ------------
BinaryOp {
    span: Some(
        12..13,
    ),
    op: Plus,
    left: UnaryOp {
        span: Some(
            0..1,
        ),
        op: Minus,
        expr: UnaryOp {
            span: Some(
                2..3,
            ),
            op: Minus,
            expr: UnaryOp {
                span: Some(
                    4..5,
                ),
                op: Plus,
                expr: UnaryOp {
                    span: Some(
                        6..7,
                    ),
                    op: Plus,
                    expr: UnaryOp {
                        span: Some(
                            8..9,
                        ),
                        op: Minus,
                        expr: Literal {
                            span: Some(
                                10..11,
                            ),
                            lit: UInt64(
                                1,
                            ),
                        },
                    },
                },
            },
        },
    },
    right: UnaryOp {
        span: Some(
            14..15,
        ),
        op: Plus,
        expr: UnaryOp {
            span: Some(
                16..17,
            ),
            op: Minus,
            expr: Literal {
                span: Some(
                    18..19,
                ),
                lit: UInt64(
                    2,
                ),
            },
        },
    },
}


---------- Input ----------
0XFF + 0xff + 0xa + x'ffff'
---------- Output ---------
(((255 + 255) + 10) + 65535)
---------- AST ------------
BinaryOp {
    span: Some(
        18..19,
    ),
    op: Plus,
    left: BinaryOp {
        span: Some(
            12..13,
        ),
        op: Plus,
        left: BinaryOp {
            span: Some(
                5..6,
            ),
            op: Plus,
            left: Literal {
                span: Some(
                    0..4,
                ),
                lit: UInt64(
                    255,
                ),
            },
            right: Literal {
                span: Some(
                    7..11,
                ),
                lit: UInt64(
                    255,
                ),
            },
        },
        right: Literal {
            span: Some(
                14..17,
            ),
            lit: UInt64(
                10,
            ),
        },
    },
    right: Literal {
        span: Some(
            20..27,
        ),
        lit: UInt64(
            65535,
        ),
    },
}


---------- Input ----------
1 - -(- - -1)
---------- Output ---------
(1 - (- (- (- (- 1)))))
---------- AST ------------
BinaryOp {
    span: Some(
        2..3,
    ),
    op: Minus,
    left: Literal {
        span: Some(
            0..1,
        ),
        lit: UInt64(
            1,
        ),
    },
    right: UnaryOp {
        span: Some(
            4..5,
        ),
        op: Minus,
        expr: UnaryOp {
            span: Some(
                6..7,
            ),
            op: Minus,
            expr: UnaryOp {
                span: Some(
                    8..9,
                ),
                op: Minus,
                expr: UnaryOp {
                    span: Some(
                        10..11,
                    ),
                    op: Minus,
                    expr: Literal {
                        span: Some(
                            11..12,
                        ),
                        lit: UInt64(
                            1,
                        ),
                    },
                },
            },
        },
    },
}


---------- Input ----------
1 + a * c.d
---------- Output ---------
(1 + (a * c.d))
---------- AST ------------
BinaryOp {
    span: Some(
        2..3,
    ),
    op: Plus,
    left: Literal {
        span: Some(
            0..1,
        ),
        lit: UInt64(
            1,
        ),
    },
    right: BinaryOp {
        span: Some(
            6..7,
        ),
        op: Multiply,
        left: ColumnRef {
            span: Some(
                4..5,
            ),
            column: ColumnRef {
                database: None,
                table: None,
                column: Name(
                    Identifier {
                        span: Some(
                            4..5,
                        ),
                        name: "a",
                        quote: None,
                    },
                ),
            },
        },
        right: ColumnRef {
            span: Some(
                8..9,
            ),
            column: ColumnRef {
                database: None,
                table: Some(
                    Identifier {
                        span: Some(
                            8..9,
                        ),
                        name: "c",
                        quote: None,
                    },
                ),
                column: Name(
                    Identifier {
                        span: Some(
                            10..11,
                        ),
                        name: "d",
                        quote: None,
                    },
                ),
            },
        },
    },
}


---------- Input ----------
number % 2
---------- Output ---------
(number % 2)
---------- AST ------------
BinaryOp {
    span: Some(
        7..8,
    ),
    op: Modulo,
    left: ColumnRef {
        span: Some(
            0..6,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        0..6,
                    ),
                    name: "number",
                    quote: None,
                },
            ),
        },
    },
    right: Literal {
        span: Some(
            9..10,
        ),
        lit: UInt64(
            2,
        ),
    },
}


---------- Input ----------
"t":k1.k2
---------- Output ---------
"t":k1:k2
---------- AST ------------
MapAccess {
    span: Some(
        6..9,
    ),
    expr: MapAccess {
        span: Some(
            3..6,
        ),
        expr: ColumnRef {
            span: Some(
                0..3,
            ),
            column: ColumnRef {
                database: None,
                table: None,
                column: Name(
                    Identifier {
                        span: Some(
                            0..3,
                        ),
                        name: "t",
                        quote: Some(
                            '"',
                        ),
                    },
                ),
            },
        },
        accessor: Colon {
            key: Identifier {
                span: Some(
                    4..6,
                ),
                name: "k1",
                quote: None,
            },
        },
    },
    accessor: Colon {
        key: Identifier {
            span: Some(
                7..9,
            ),
            name: "k2",
            quote: None,
        },
    },
}


---------- Input ----------
"t":k1.k2.0
---------- Output ---------
"t":k1:k2.0
---------- AST ------------
MapAccess {
    span: Some(
        9..11,
    ),
    expr: MapAccess {
        span: Some(
            6..9,
        ),
        expr: MapAccess {
            span: Some(
                3..6,
            ),
            expr: ColumnRef {
                span: Some(
                    0..3,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                0..3,
                            ),
                            name: "t",
                            quote: Some(
                                '"',
                            ),
                        },
                    ),
                },
            },
            accessor: Colon {
                key: Identifier {
                    span: Some(
                        4..6,
                    ),
                    name: "k1",
                    quote: None,
                },
            },
        },
        accessor: Colon {
            key: Identifier {
                span: Some(
                    7..9,
                ),
                name: "k2",
                quote: None,
            },
        },
    },
    accessor: DotNumber {
        key: 0,
    },
}


---------- Input ----------
t.0
---------- Output ---------
t.0
---------- AST ------------
MapAccess {
    span: Some(
        1..3,
    ),
    expr: ColumnRef {
        span: Some(
            0..1,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        0..1,
                    ),
                    name: "t",
                    quote: None,
                },
            ),
        },
    },
    accessor: DotNumber {
        key: 0,
    },
}


---------- Input ----------
(NULL,).0
---------- Output ---------
(NULL,).0
---------- AST ------------
MapAccess {
    span: Some(
        7..9,
    ),
    expr: Tuple {
        span: Some(
            0..7,
        ),
        exprs: [
            Literal {
                span: Some(
                    1..5,
                ),
                lit: Null,
            },
        ],
    },
    accessor: DotNumber {
        key: 0,
    },
}


---------- Input ----------
col1 not between 1 and 2
---------- Output ---------
col1 NOT BETWEEN 1 AND 2
---------- AST ------------
Between {
    span: Some(
        5..24,
    ),
    expr: ColumnRef {
        span: Some(
            0..4,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        0..4,
                    ),
                    name: "col1",
                    quote: None,
                },
            ),
        },
    },
    low: Literal {
        span: Some(
            17..18,
        ),
        lit: UInt64(
            1,
        ),
    },
    high: Literal {
        span: Some(
            23..24,
        ),
        lit: UInt64(
            2,
        ),
    },
    not: true,
}


---------- Input ----------
sum(col1)
---------- Output ---------
sum(col1)
---------- AST ------------
FunctionCall {
    span: Some(
        0..9,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..3,
            ),
            name: "sum",
            quote: None,
        },
        args: [
            ColumnRef {
                span: Some(
                    4..8,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                4..8,
                            ),
                            name: "col1",
                            quote: None,
                        },
                    ),
                },
            },
        ],
        params: [],
        window: None,
        lambda: None,
    },
}


---------- Input ----------
"random"()
---------- Output ---------
"random"()
---------- AST ------------
FunctionCall {
    span: Some(
        0..10,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..8,
            ),
            name: "random",
            quote: Some(
                '"',
            ),
        },
        args: [],
        params: [],
        window: None,
        lambda: None,
    },
}


---------- Input ----------
random(distinct)
---------- Output ---------
random(DISTINCT )
---------- AST ------------
FunctionCall {
    span: Some(
        0..16,
    ),
    func: FunctionCall {
        distinct: true,
        name: Identifier {
            span: Some(
                0..6,
            ),
            name: "random",
            quote: None,
        },
        args: [],
        params: [],
        window: None,
        lambda: None,
    },
}


---------- Input ----------
covar_samp(number, number)
---------- Output ---------
covar_samp(number, number)
---------- AST ------------
FunctionCall {
    span: Some(
        0..26,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..10,
            ),
            name: "covar_samp",
            quote: None,
        },
        args: [
            ColumnRef {
                span: Some(
                    11..17,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                11..17,
                            ),
                            name: "number",
                            quote: None,
                        },
                    ),
                },
            },
            ColumnRef {
                span: Some(
                    19..25,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                19..25,
                            ),
                            name: "number",
                            quote: None,
                        },
                    ),
                },
            },
        ],
        params: [],
        window: None,
        lambda: None,
    },
}


---------- Input ----------
CAST(col1 AS BIGINT UNSIGNED)
---------- Output ---------
CAST(col1 AS UInt64)
---------- AST ------------
Cast {
    span: Some(
        0..29,
    ),
    expr: ColumnRef {
        span: Some(
            5..9,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        5..9,
                    ),
                    name: "col1",
                    quote: None,
                },
            ),
        },
    },
    target_type: UInt64,
    pg_style: false,
}


---------- Input ----------
TRY_CAST(col1 AS BIGINT UNSIGNED)
---------- Output ---------
TRY_CAST(col1 AS UInt64)
---------- AST ------------
TryCast {
    span: Some(
        0..33,
    ),
    expr: ColumnRef {
        span: Some(
            9..13,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        9..13,
                    ),
                    name: "col1",
                    quote: None,
                },
            ),
        },
    },
    target_type: UInt64,
}


---------- Input ----------
TRY_CAST(col1 AS TUPLE(BIGINT UNSIGNED NULL, BOOLEAN))
---------- Output ---------
TRY_CAST(col1 AS TUPLE(UInt64 NULL, BOOLEAN))
---------- AST ------------
TryCast {
    span: Some(
        0..54,
    ),
    expr: ColumnRef {
        span: Some(
            9..13,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        9..13,
                    ),
                    name: "col1",
                    quote: None,
                },
            ),
        },
    },
    target_type: Tuple {
        fields_name: None,
        fields_type: [
            Nullable(
                UInt64,
            ),
            Boolean,
        ],
    },
}


---------- Input ----------
trim(leading 'abc' from 'def')
---------- Output ---------
TRIM(LEADING 'abc' FROM 'def')
---------- AST ------------
Trim {
    span: Some(
        0..30,
    ),
    expr: Literal {
        span: Some(
            24..29,
        ),
        lit: String(
            "def",
        ),
    },
    trim_where: Some(
        (
            Leading,
            Literal {
                span: Some(
                    13..18,
                ),
                lit: String(
                    "abc",
                ),
            },
        ),
    ),
}


---------- Input ----------
extract(year from d)
---------- Output ---------
EXTRACT(YEAR FROM d)
---------- AST ------------
Extract {
    span: Some(
        0..20,
    ),
    kind: Year,
    expr: ColumnRef {
        span: Some(
            18..19,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        18..19,
                    ),
                    name: "d",
                    quote: None,
                },
            ),
        },
    },
}


---------- Input ----------
date_part(year, d)
---------- Output ---------
DATE_PART(YEAR, d)
---------- AST ------------
DatePart {
    span: Some(
        0..18,
    ),
    kind: Year,
    expr: ColumnRef {
        span: Some(
            16..17,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        16..17,
                    ),
                    name: "d",
                    quote: None,
                },
            ),
        },
    },
}


---------- Input ----------
position('a' in str)
---------- Output ---------
POSITION('a' IN str)
---------- AST ------------
Position {
    span: Some(
        0..20,
    ),
    substr_expr: Literal {
        span: Some(
            9..12,
        ),
        lit: String(
            "a",
        ),
    },
    str_expr: ColumnRef {
        span: Some(
            16..19,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        16..19,
                    ),
                    name: "str",
                    quote: None,
                },
            ),
        },
    },
}


---------- Input ----------
substring(a from b for c)
---------- Output ---------
SUBSTRING(a FROM b FOR c)
---------- AST ------------
Substring {
    span: Some(
        0..25,
    ),
    expr: ColumnRef {
        span: Some(
            10..11,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        10..11,
                    ),
                    name: "a",
                    quote: None,
                },
            ),
        },
    },
    substring_from: ColumnRef {
        span: Some(
            17..18,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        17..18,
                    ),
                    name: "b",
                    quote: None,
                },
            ),
        },
    },
    substring_for: Some(
        ColumnRef {
            span: Some(
                23..24,
            ),
            column: ColumnRef {
                database: None,
                table: None,
                column: Name(
                    Identifier {
                        span: Some(
                            23..24,
                        ),
                        name: "c",
                        quote: None,
                    },
                ),
            },
        },
    ),
}


---------- Input ----------
substring(a, b, c)
---------- Output ---------
SUBSTRING(a FROM b FOR c)
---------- AST ------------
Substring {
    span: Some(
        0..18,
    ),
    expr: ColumnRef {
        span: Some(
            10..11,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        10..11,
                    ),
                    name: "a",
                    quote: None,
                },
            ),
        },
    },
    substring_from: ColumnRef {
        span: Some(
            13..14,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        13..14,
                    ),
                    name: "b",
                    quote: None,
                },
            ),
        },
    },
    substring_for: Some(
        ColumnRef {
            span: Some(
                16..17,
            ),
            column: ColumnRef {
                database: None,
                table: None,
                column: Name(
                    Identifier {
                        span: Some(
                            16..17,
                        ),
                        name: "c",
                        quote: None,
                    },
                ),
            },
        },
    ),
}


---------- Input ----------
col1::UInt8
---------- Output ---------
col1::UInt8
---------- AST ------------
Cast {
    span: Some(
        4..11,
    ),
    expr: ColumnRef {
        span: Some(
            0..4,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        0..4,
                    ),
                    name: "col1",
                    quote: None,
                },
            ),
        },
    },
    target_type: UInt8,
    pg_style: true,
}


---------- Input ----------
(arr[0]:a).b
---------- Output ---------
arr[0]:a:b
---------- AST ------------
MapAccess {
    span: Some(
        10..12,
    ),
    expr: MapAccess {
        span: Some(
            7..9,
        ),
        expr: MapAccess {
            span: Some(
                4..7,
            ),
            expr: ColumnRef {
                span: Some(
                    1..4,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                1..4,
                            ),
                            name: "arr",
                            quote: None,
                        },
                    ),
                },
            },
            accessor: Bracket {
                key: Literal {
                    span: Some(
                        5..6,
                    ),
                    lit: UInt64(
                        0,
                    ),
                },
            },
        },
        accessor: Colon {
            key: Identifier {
                span: Some(
                    8..9,
                ),
                name: "a",
                quote: None,
            },
        },
    },
    accessor: Colon {
        key: Identifier {
            span: Some(
                11..12,
            ),
            name: "b",
            quote: None,
        },
    },
}


---------- Input ----------
arr[4]["k"]
---------- Output ---------
arr[4]["k"]
---------- AST ------------
MapAccess {
    span: Some(
        6..11,
    ),
    expr: MapAccess {
        span: Some(
            3..6,
        ),
        expr: ColumnRef {
            span: Some(
                0..3,
            ),
            column: ColumnRef {
                database: None,
                table: None,
                column: Name(
                    Identifier {
                        span: Some(
                            0..3,
                        ),
                        name: "arr",
                        quote: None,
                    },
                ),
            },
        },
        accessor: Bracket {
            key: Literal {
                span: Some(
                    4..5,
                ),
                lit: UInt64(
                    4,
                ),
            },
        },
    },
    accessor: Bracket {
        key: ColumnRef {
            span: Some(
                7..10,
            ),
            column: ColumnRef {
                database: None,
                table: None,
                column: Name(
                    Identifier {
                        span: Some(
                            7..10,
                        ),
                        name: "k",
                        quote: Some(
                            '"',
                        ),
                    },
                ),
            },
        },
    },
}


---------- Input ----------
a rlike '^11'
---------- Output ---------
(a RLIKE '^11')
---------- AST ------------
BinaryOp {
    span: Some(
        2..7,
    ),
    op: RLike,
    left: ColumnRef {
        span: Some(
            0..1,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        0..1,
                    ),
                    name: "a",
                    quote: None,
                },
            ),
        },
    },
    right: Literal {
        span: Some(
            8..13,
        ),
        lit: String(
            "^11",
        ),
    },
}


---------- Input ----------
'中文'::text not in ('a', 'b')
---------- Output ---------
'中文'::STRING NOT IN('a', 'b')
---------- AST ------------
InList {
    span: Some(
        15..32,
    ),
    expr: Cast {
        span: Some(
            8..14,
        ),
        expr: Literal {
            span: Some(
                0..8,
            ),
            lit: String(
                "中文",
            ),
        },
        target_type: String,
        pg_style: true,
    },
    list: [
        Literal {
            span: Some(
                23..26,
            ),
            lit: String(
                "a",
            ),
        },
        Literal {
            span: Some(
                28..31,
            ),
            lit: String(
                "b",
            ),
        },
    ],
    not: true,
}


---------- Input ----------
G.E.B IS NOT NULL AND col1 not between col2 and (1 + col3) DIV sum(col4)
---------- Output ---------
(G.E.B IS NOT NULL AND col1 NOT BETWEEN col2 AND ((1 + col3) DIV sum(col4)))
---------- AST ------------
BinaryOp {
    span: Some(
        18..21,
    ),
    op: And,
    left: IsNull {
        span: Some(
            6..17,
        ),
        expr: ColumnRef {
            span: Some(
                0..1,
            ),
            column: ColumnRef {
                database: Some(
                    Identifier {
                        span: Some(
                            0..1,
                        ),
                        name: "G",
                        quote: None,
                    },
                ),
                table: Some(
                    Identifier {
                        span: Some(
                            2..3,
                        ),
                        name: "E",
                        quote: None,
                    },
                ),
                column: Name(
                    Identifier {
                        span: Some(
                            4..5,
                        ),
                        name: "B",
                        quote: None,
                    },
                ),
            },
        },
        not: true,
    },
    right: Between {
        span: Some(
            27..72,
        ),
        expr: ColumnRef {
            span: Some(
                22..26,
            ),
            column: ColumnRef {
                database: None,
                table: None,
                column: Name(
                    Identifier {
                        span: Some(
                            22..26,
                        ),
                        name: "col1",
                        quote: None,
                    },
                ),
            },
        },
        low: ColumnRef {
            span: Some(
                39..43,
            ),
            column: ColumnRef {
                database: None,
                table: None,
                column: Name(
                    Identifier {
                        span: Some(
                            39..43,
                        ),
                        name: "col2",
                        quote: None,
                    },
                ),
            },
        },
        high: BinaryOp {
            span: Some(
                59..62,
            ),
            op: Div,
            left: BinaryOp {
                span: Some(
                    51..52,
                ),
                op: Plus,
                left: Literal {
                    span: Some(
                        49..50,
                    ),
                    lit: UInt64(
                        1,
                    ),
                },
                right: ColumnRef {
                    span: Some(
                        53..57,
                    ),
                    column: ColumnRef {
                        database: None,
                        table: None,
                        column: Name(
                            Identifier {
                                span: Some(
                                    53..57,
                                ),
                                name: "col3",
                                quote: None,
                            },
                        ),
                    },
                },
            },
            right: FunctionCall {
                span: Some(
                    63..72,
                ),
                func: FunctionCall {
                    distinct: false,
                    name: Identifier {
                        span: Some(
                            63..66,
                        ),
                        name: "sum",
                        quote: None,
                    },
                    args: [
                        ColumnRef {
                            span: Some(
                                67..71,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            67..71,
                                        ),
                                        name: "col4",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                    ],
                    params: [],
                    window: None,
                    lambda: None,
                },
            },
        },
        not: true,
    },
}


---------- Input ----------
sum(CASE WHEN n2.n_name = 'GERMANY' THEN ol_amount ELSE 0 END) / CASE WHEN sum(ol_amount) = 0 THEN 1 ELSE sum(ol_amount) END
---------- Output ---------
(sum(CASE WHEN (n2.n_name = 'GERMANY') THEN ol_amount ELSE 0 END) / CASE WHEN (sum(ol_amount) = 0) THEN 1 ELSE sum(ol_amount) END)
---------- AST ------------
BinaryOp {
    span: Some(
        63..64,
    ),
    op: Divide,
    left: FunctionCall {
        span: Some(
            0..62,
        ),
        func: FunctionCall {
            distinct: false,
            name: Identifier {
                span: Some(
                    0..3,
                ),
                name: "sum",
                quote: None,
            },
            args: [
                Case {
                    span: Some(
                        4..61,
                    ),
                    operand: None,
                    conditions: [
                        BinaryOp {
                            span: Some(
                                24..25,
                            ),
                            op: Eq,
                            left: ColumnRef {
                                span: Some(
                                    14..16,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: Some(
                                        Identifier {
                                            span: Some(
                                                14..16,
                                            ),
                                            name: "n2",
                                            quote: None,
                                        },
                                    ),
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                17..23,
                                            ),
                                            name: "n_name",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            right: Literal {
                                span: Some(
                                    26..35,
                                ),
                                lit: String(
                                    "GERMANY",
                                ),
                            },
                        },
                    ],
                    results: [
                        ColumnRef {
                            span: Some(
                                41..50,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            41..50,
                                        ),
                                        name: "ol_amount",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                    ],
                    else_result: Some(
                        Literal {
                            span: Some(
                                56..57,
                            ),
                            lit: UInt64(
                                0,
                            ),
                        },
                    ),
                },
            ],
            params: [],
            window: None,
            lambda: None,
        },
    },
    right: Case {
        span: Some(
            65..124,
        ),
        operand: None,
        conditions: [
            BinaryOp {
                span: Some(
                    90..91,
                ),
                op: Eq,
                left: FunctionCall {
                    span: Some(
                        75..89,
                    ),
                    func: FunctionCall {
                        distinct: false,
                        name: Identifier {
                            span: Some(
                                75..78,
                            ),
                            name: "sum",
                            quote: None,
                        },
                        args: [
                            ColumnRef {
                                span: Some(
                                    79..88,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                79..88,
                                            ),
                                            name: "ol_amount",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                        ],
                        params: [],
                        window: None,
                        lambda: None,
                    },
                },
                right: Literal {
                    span: Some(
                        92..93,
                    ),
                    lit: UInt64(
                        0,
                    ),
                },
            },
        ],
        results: [
            Literal {
                span: Some(
                    99..100,
                ),
                lit: UInt64(
                    1,
                ),
            },
        ],
        else_result: Some(
            FunctionCall {
                span: Some(
                    106..120,
                ),
                func: FunctionCall {
                    distinct: false,
                    name: Identifier {
                        span: Some(
                            106..109,
                        ),
                        name: "sum",
                        quote: None,
                    },
                    args: [
                        ColumnRef {
                            span: Some(
                                110..119,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            110..119,
                                        ),
                                        name: "ol_amount",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                    ],
                    params: [],
                    window: None,
                    lambda: None,
                },
            },
        ),
    },
}


---------- Input ----------
p_partkey = l_partkey
            AND p_brand = 'Brand#12'
            AND p_container IN ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
            AND l_quantity >= CAST (1 AS smallint) AND l_quantity <= CAST (1 + 10 AS smallint)
            AND p_size BETWEEN CAST (1 AS smallint) AND CAST (5 AS smallint)
            AND l_shipmode IN ('AIR', 'AIR REG')
            AND l_shipinstruct = 'DELIVER IN PERSON'
---------- Output ---------
((((((((p_partkey = l_partkey) AND (p_brand = 'Brand#12')) AND p_container IN('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')) AND (l_quantity >= CAST(1 AS Int16))) AND (l_quantity <= CAST((1 + 10) AS Int16))) AND p_size BETWEEN CAST(1 AS Int16) AND CAST(5 AS Int16)) AND l_shipmode IN('AIR', 'AIR REG')) AND (l_shipinstruct = 'DELIVER IN PERSON'))
---------- AST ------------
BinaryOp {
    span: Some(
        366..369,
    ),
    op: And,
    left: BinaryOp {
        span: Some(
            317..320,
        ),
        op: And,
        left: BinaryOp {
            span: Some(
                240..243,
            ),
            op: And,
            left: BinaryOp {
                span: Some(
                    184..187,
                ),
                op: And,
                left: BinaryOp {
                    span: Some(
                        145..148,
                    ),
                    op: And,
                    left: BinaryOp {
                        span: Some(
                            71..74,
                        ),
                        op: And,
                        left: BinaryOp {
                            span: Some(
                                34..37,
                            ),
                            op: And,
                            left: BinaryOp {
                                span: Some(
                                    10..11,
                                ),
                                op: Eq,
                                left: ColumnRef {
                                    span: Some(
                                        0..9,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    0..9,
                                                ),
                                                name: "p_partkey",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                                right: ColumnRef {
                                    span: Some(
                                        12..21,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    12..21,
                                                ),
                                                name: "l_partkey",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                            },
                            right: BinaryOp {
                                span: Some(
                                    46..47,
                                ),
                                op: Eq,
                                left: ColumnRef {
                                    span: Some(
                                        38..45,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    38..45,
                                                ),
                                                name: "p_brand",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                                right: Literal {
                                    span: Some(
                                        48..58,
                                    ),
                                    lit: String(
                                        "Brand#12",
                                    ),
                                },
                            },
                        },
                        right: InList {
                            span: Some(
                                87..132,
                            ),
                            expr: ColumnRef {
                                span: Some(
                                    75..86,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                75..86,
                                            ),
                                            name: "p_container",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            list: [
                                Literal {
                                    span: Some(
                                        91..100,
                                    ),
                                    lit: String(
                                        "SM CASE",
                                    ),
                                },
                                Literal {
                                    span: Some(
                                        102..110,
                                    ),
                                    lit: String(
                                        "SM BOX",
                                    ),
                                },
                                Literal {
                                    span: Some(
                                        112..121,
                                    ),
                                    lit: String(
                                        "SM PACK",
                                    ),
                                },
                                Literal {
                                    span: Some(
                                        123..131,
                                    ),
                                    lit: String(
                                        "SM PKG",
                                    ),
                                },
                            ],
                            not: false,
                        },
                    },
                    right: BinaryOp {
                        span: Some(
                            160..162,
                        ),
                        op: Gte,
                        left: ColumnRef {
                            span: Some(
                                149..159,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            149..159,
                                        ),
                                        name: "l_quantity",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        right: Cast {
                            span: Some(
                                163..183,
                            ),
                            expr: Literal {
                                span: Some(
                                    169..170,
                                ),
                                lit: UInt64(
                                    1,
                                ),
                            },
                            target_type: Int16,
                            pg_style: false,
                        },
                    },
                },
                right: BinaryOp {
                    span: Some(
                        199..201,
                    ),
                    op: Lte,
                    left: ColumnRef {
                        span: Some(
                            188..198,
                        ),
                        column: ColumnRef {
                            database: None,
                            table: None,
                            column: Name(
                                Identifier {
                                    span: Some(
                                        188..198,
                                    ),
                                    name: "l_quantity",
                                    quote: None,
                                },
                            ),
                        },
                    },
                    right: Cast {
                        span: Some(
                            202..227,
                        ),
                        expr: BinaryOp {
                            span: Some(
                                210..211,
                            ),
                            op: Plus,
                            left: Literal {
                                span: Some(
                                    208..209,
                                ),
                                lit: UInt64(
                                    1,
                                ),
                            },
                            right: Literal {
                                span: Some(
                                    212..214,
                                ),
                                lit: UInt64(
                                    10,
                                ),
                            },
                        },
                        target_type: Int16,
                        pg_style: false,
                    },
                },
            },
            right: Between {
                span: Some(
                    251..304,
                ),
                expr: ColumnRef {
                    span: Some(
                        244..250,
                    ),
                    column: ColumnRef {
                        database: None,
                        table: None,
                        column: Name(
                            Identifier {
                                span: Some(
                                    244..250,
                                ),
                                name: "p_size",
                                quote: None,
                            },
                        ),
                    },
                },
                low: Cast {
                    span: Some(
                        259..279,
                    ),
                    expr: Literal {
                        span: Some(
                            265..266,
                        ),
                        lit: UInt64(
                            1,
                        ),
                    },
                    target_type: Int16,
                    pg_style: false,
                },
                high: Cast {
                    span: Some(
                        284..304,
                    ),
                    expr: Literal {
                        span: Some(
                            290..291,
                        ),
                        lit: UInt64(
                            5,
                        ),
                    },
                    target_type: Int16,
                    pg_style: false,
                },
                not: false,
            },
        },
        right: InList {
            span: Some(
                332..353,
            ),
            expr: ColumnRef {
                span: Some(
                    321..331,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                321..331,
                            ),
                            name: "l_shipmode",
                            quote: None,
                        },
                    ),
                },
            },
            list: [
                Literal {
                    span: Some(
                        336..341,
                    ),
                    lit: String(
                        "AIR",
                    ),
                },
                Literal {
                    span: Some(
                        343..352,
                    ),
                    lit: String(
                        "AIR REG",
                    ),
                },
            ],
            not: false,
        },
    },
    right: BinaryOp {
        span: Some(
            385..386,
        ),
        op: Eq,
        left: ColumnRef {
            span: Some(
                370..384,
            ),
            column: ColumnRef {
                database: None,
                table: None,
                column: Name(
                    Identifier {
                        span: Some(
                            370..384,
                        ),
                        name: "l_shipinstruct",
                        quote: None,
                    },
                ),
            },
        },
        right: Literal {
            span: Some(
                387..406,
            ),
            lit: String(
                "DELIVER IN PERSON",
            ),
        },
    },
}


---------- Input ----------
nullif(1, 1)
---------- Output ---------
nullif(1, 1)
---------- AST ------------
FunctionCall {
    span: Some(
        0..12,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..6,
            ),
            name: "nullif",
            quote: None,
        },
        args: [
            Literal {
                span: Some(
                    7..8,
                ),
                lit: UInt64(
                    1,
                ),
            },
            Literal {
                span: Some(
                    10..11,
                ),
                lit: UInt64(
                    1,
                ),
            },
        ],
        params: [],
        window: None,
        lambda: None,
    },
}


---------- Input ----------
nullif(a, b)
---------- Output ---------
nullif(a, b)
---------- AST ------------
FunctionCall {
    span: Some(
        0..12,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..6,
            ),
            name: "nullif",
            quote: None,
        },
        args: [
            ColumnRef {
                span: Some(
                    7..8,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                7..8,
                            ),
                            name: "a",
                            quote: None,
                        },
                    ),
                },
            },
            ColumnRef {
                span: Some(
                    10..11,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                10..11,
                            ),
                            name: "b",
                            quote: None,
                        },
                    ),
                },
            },
        ],
        params: [],
        window: None,
        lambda: None,
    },
}


---------- Input ----------
coalesce(1, 2, 3)
---------- Output ---------
coalesce(1, 2, 3)
---------- AST ------------
FunctionCall {
    span: Some(
        0..17,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..8,
            ),
            name: "coalesce",
            quote: None,
        },
        args: [
            Literal {
                span: Some(
                    9..10,
                ),
                lit: UInt64(
                    1,
                ),
            },
            Literal {
                span: Some(
                    12..13,
                ),
                lit: UInt64(
                    2,
                ),
            },
            Literal {
                span: Some(
                    15..16,
                ),
                lit: UInt64(
                    3,
                ),
            },
        ],
        params: [],
        window: None,
        lambda: None,
    },
}


---------- Input ----------
coalesce(a, b, c)
---------- Output ---------
coalesce(a, b, c)
---------- AST ------------
FunctionCall {
    span: Some(
        0..17,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..8,
            ),
            name: "coalesce",
            quote: None,
        },
        args: [
            ColumnRef {
                span: Some(
                    9..10,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                9..10,
                            ),
                            name: "a",
                            quote: None,
                        },
                    ),
                },
            },
            ColumnRef {
                span: Some(
                    12..13,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                12..13,
                            ),
                            name: "b",
                            quote: None,
                        },
                    ),
                },
            },
            ColumnRef {
                span: Some(
                    15..16,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                15..16,
                            ),
                            name: "c",
                            quote: None,
                        },
                    ),
                },
            },
        ],
        params: [],
        window: None,
        lambda: None,
    },
}


---------- Input ----------
ifnull(1, 1)
---------- Output ---------
ifnull(1, 1)
---------- AST ------------
FunctionCall {
    span: Some(
        0..12,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..6,
            ),
            name: "ifnull",
            quote: None,
        },
        args: [
            Literal {
                span: Some(
                    7..8,
                ),
                lit: UInt64(
                    1,
                ),
            },
            Literal {
                span: Some(
                    10..11,
                ),
                lit: UInt64(
                    1,
                ),
            },
        ],
        params: [],
        window: None,
        lambda: None,
    },
}


---------- Input ----------
ifnull(a, b)
---------- Output ---------
ifnull(a, b)
---------- AST ------------
FunctionCall {
    span: Some(
        0..12,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..6,
            ),
            name: "ifnull",
            quote: None,
        },
        args: [
            ColumnRef {
                span: Some(
                    7..8,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                7..8,
                            ),
                            name: "a",
                            quote: None,
                        },
                    ),
                },
            },
            ColumnRef {
                span: Some(
                    10..11,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                10..11,
                            ),
                            name: "b",
                            quote: None,
                        },
                    ),
                },
            },
        ],
        params: [],
        window: None,
        lambda: None,
    },
}


---------- Input ----------
1 is distinct from 2
---------- Output ---------
1 IS DISTINCT FROM 2
---------- AST ------------
IsDistinctFrom {
    span: Some(
        2..18,
    ),
    left: Literal {
        span: Some(
            0..1,
        ),
        lit: UInt64(
            1,
        ),
    },
    right: Literal {
        span: Some(
            19..20,
        ),
        lit: UInt64(
            2,
        ),
    },
    not: false,
}


---------- Input ----------
a is distinct from b
---------- Output ---------
a IS DISTINCT FROM b
---------- AST ------------
IsDistinctFrom {
    span: Some(
        2..18,
    ),
    left: ColumnRef {
        span: Some(
            0..1,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        0..1,
                    ),
                    name: "a",
                    quote: None,
                },
            ),
        },
    },
    right: ColumnRef {
        span: Some(
            19..20,
        ),
        column: ColumnRef {
            database: None,
            table: None,
            column: Name(
                Identifier {
                    span: Some(
                        19..20,
                    ),
                    name: "b",
                    quote: None,
                },
            ),
        },
    },
    not: false,
}


---------- Input ----------
1 is not distinct from null
---------- Output ---------
1 IS NOT DISTINCT FROM NULL
---------- AST ------------
IsDistinctFrom {
    span: Some(
        2..22,
    ),
    left: Literal {
        span: Some(
            0..1,
        ),
        lit: UInt64(
            1,
        ),
    },
    right: Literal {
        span: Some(
            23..27,
        ),
        lit: Null,
    },
    not: true,
}


---------- Input ----------
{'k1':1,'k2':2}
---------- Output ---------
{'k1':1,'k2':2}
---------- AST ------------
Map {
    span: Some(
        0..15,
    ),
    kvs: [
        (
            String(
                "k1",
            ),
            Literal {
                span: Some(
                    6..7,
                ),
                lit: UInt64(
                    1,
                ),
            },
        ),
        (
            String(
                "k2",
            ),
            Literal {
                span: Some(
                    13..14,
                ),
                lit: UInt64(
                    2,
                ),
            },
        ),
    ],
}


---------- Input ----------
ROW_NUMBER() OVER (ORDER BY salary DESC)
---------- Output ---------
ROW_NUMBER() OVER (ORDER BY salary DESC)
---------- AST ------------
FunctionCall {
    span: Some(
        0..40,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..10,
            ),
            name: "ROW_NUMBER",
            quote: None,
        },
        args: [],
        params: [],
        window: Some(
            WindowSpec(
                WindowSpec {
                    existing_window_name: None,
                    partition_by: [],
                    order_by: [
                        OrderByExpr {
                            expr: ColumnRef {
                                span: Some(
                                    28..34,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                28..34,
                                            ),
                                            name: "salary",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            asc: Some(
                                false,
                            ),
                            nulls_first: None,
                        },
                    ],
                    window_frame: None,
                },
            ),
        ),
        lambda: None,
    },
}


---------- Input ----------
SUM(salary) OVER ()
---------- Output ---------
SUM(salary) OVER ()
---------- AST ------------
FunctionCall {
    span: Some(
        0..19,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..3,
            ),
            name: "SUM",
            quote: None,
        },
        args: [
            ColumnRef {
                span: Some(
                    4..10,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                4..10,
                            ),
                            name: "salary",
                            quote: None,
                        },
                    ),
                },
            },
        ],
        params: [],
        window: Some(
            WindowSpec(
                WindowSpec {
                    existing_window_name: None,
                    partition_by: [],
                    order_by: [],
                    window_frame: None,
                },
            ),
        ),
        lambda: None,
    },
}


---------- Input ----------
AVG(salary) OVER (PARTITION BY department)
---------- Output ---------
AVG(salary) OVER (PARTITION BY department)
---------- AST ------------
FunctionCall {
    span: Some(
        0..42,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..3,
            ),
            name: "AVG",
            quote: None,
        },
        args: [
            ColumnRef {
                span: Some(
                    4..10,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                4..10,
                            ),
                            name: "salary",
                            quote: None,
                        },
                    ),
                },
            },
        ],
        params: [],
        window: Some(
            WindowSpec(
                WindowSpec {
                    existing_window_name: None,
                    partition_by: [
                        ColumnRef {
                            span: Some(
                                31..41,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            31..41,
                                        ),
                                        name: "department",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                    ],
                    order_by: [],
                    window_frame: None,
                },
            ),
        ),
        lambda: None,
    },
}


---------- Input ----------
SUM(salary) OVER (PARTITION BY department ORDER BY salary DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
---------- Output ---------
SUM(salary) OVER (PARTITION BY department ORDER BY salary DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
---------- AST ------------
FunctionCall {
    span: Some(
        0..112,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..3,
            ),
            name: "SUM",
            quote: None,
        },
        args: [
            ColumnRef {
                span: Some(
                    4..10,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                4..10,
                            ),
                            name: "salary",
                            quote: None,
                        },
                    ),
                },
            },
        ],
        params: [],
        window: Some(
            WindowSpec(
                WindowSpec {
                    existing_window_name: None,
                    partition_by: [
                        ColumnRef {
                            span: Some(
                                31..41,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            31..41,
                                        ),
                                        name: "department",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                    ],
                    order_by: [
                        OrderByExpr {
                            expr: ColumnRef {
                                span: Some(
                                    51..57,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                51..57,
                                            ),
                                            name: "salary",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            asc: Some(
                                false,
                            ),
                            nulls_first: None,
                        },
                    ],
                    window_frame: Some(
                        WindowFrame {
                            units: Rows,
                            start_bound: Preceding(
                                None,
                            ),
                            end_bound: CurrentRow,
                        },
                    ),
                },
            ),
        ),
        lambda: None,
    },
}


---------- Input ----------
AVG(salary) OVER (PARTITION BY department ORDER BY hire_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) 
---------- Output ---------
AVG(salary) OVER (PARTITION BY department ORDER BY hire_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)
---------- AST ------------
FunctionCall {
    span: Some(
        0..102,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..3,
            ),
            name: "AVG",
            quote: None,
        },
        args: [
            ColumnRef {
                span: Some(
                    4..10,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                4..10,
                            ),
                            name: "salary",
                            quote: None,
                        },
                    ),
                },
            },
        ],
        params: [],
        window: Some(
            WindowSpec(
                WindowSpec {
                    existing_window_name: None,
                    partition_by: [
                        ColumnRef {
                            span: Some(
                                31..41,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            31..41,
                                        ),
                                        name: "department",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                    ],
                    order_by: [
                        OrderByExpr {
                            expr: ColumnRef {
                                span: Some(
                                    51..60,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                51..60,
                                            ),
                                            name: "hire_date",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            asc: None,
                            nulls_first: None,
                        },
                    ],
                    window_frame: Some(
                        WindowFrame {
                            units: Rows,
                            start_bound: Preceding(
                                Some(
                                    Literal {
                                        span: Some(
                                            74..75,
                                        ),
                                        lit: UInt64(
                                            2,
                                        ),
                                    },
                                ),
                            ),
                            end_bound: CurrentRow,
                        },
                    ),
                },
            ),
        ),
        lambda: None,
    },
}


---------- Input ----------
COUNT() OVER (ORDER BY hire_date RANGE BETWEEN INTERVAL '7' DAY PRECEDING AND CURRENT ROW)
---------- Output ---------
COUNT() OVER (ORDER BY hire_date RANGE BETWEEN INTERVAL '7' DAY PRECEDING AND CURRENT ROW)
---------- AST ------------
FunctionCall {
    span: Some(
        0..90,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..5,
            ),
            name: "COUNT",
            quote: None,
        },
        args: [],
        params: [],
        window: Some(
            WindowSpec(
                WindowSpec {
                    existing_window_name: None,
                    partition_by: [],
                    order_by: [
                        OrderByExpr {
                            expr: ColumnRef {
                                span: Some(
                                    23..32,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                23..32,
                                            ),
                                            name: "hire_date",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            asc: None,
                            nulls_first: None,
                        },
                    ],
                    window_frame: Some(
                        WindowFrame {
                            units: Range,
                            start_bound: Preceding(
                                Some(
                                    Interval {
                                        span: Some(
                                            47..63,
                                        ),
                                        expr: Literal {
                                            span: Some(
                                                56..59,
                                            ),
                                            lit: String(
                                                "7",
                                            ),
                                        },
                                        unit: Day,
                                    },
                                ),
                            ),
                            end_bound: CurrentRow,
                        },
                    ),
                },
            ),
        ),
        lambda: None,
    },
}


---------- Input ----------
COUNT() OVER (ORDER BY hire_date ROWS UNBOUNDED PRECEDING)
---------- Output ---------
COUNT() OVER (ORDER BY hire_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
---------- AST ------------
FunctionCall {
    span: Some(
        0..58,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..5,
            ),
            name: "COUNT",
            quote: None,
        },
        args: [],
        params: [],
        window: Some(
            WindowSpec(
                WindowSpec {
                    existing_window_name: None,
                    partition_by: [],
                    order_by: [
                        OrderByExpr {
                            expr: ColumnRef {
                                span: Some(
                                    23..32,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                23..32,
                                            ),
                                            name: "hire_date",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            asc: None,
                            nulls_first: None,
                        },
                    ],
                    window_frame: Some(
                        WindowFrame {
                            units: Rows,
                            start_bound: Preceding(
                                None,
                            ),
                            end_bound: CurrentRow,
                        },
                    ),
                },
            ),
        ),
        lambda: None,
    },
}


---------- Input ----------
COUNT() OVER (ORDER BY hire_date ROWS CURRENT ROW)
---------- Output ---------
COUNT() OVER (ORDER BY hire_date ROWS BETWEEN CURRENT ROW AND CURRENT ROW)
---------- AST ------------
FunctionCall {
    span: Some(
        0..50,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..5,
            ),
            name: "COUNT",
            quote: None,
        },
        args: [],
        params: [],
        window: Some(
            WindowSpec(
                WindowSpec {
                    existing_window_name: None,
                    partition_by: [],
                    order_by: [
                        OrderByExpr {
                            expr: ColumnRef {
                                span: Some(
                                    23..32,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                23..32,
                                            ),
                                            name: "hire_date",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            asc: None,
                            nulls_first: None,
                        },
                    ],
                    window_frame: Some(
                        WindowFrame {
                            units: Rows,
                            start_bound: CurrentRow,
                            end_bound: CurrentRow,
                        },
                    ),
                },
            ),
        ),
        lambda: None,
    },
}


---------- Input ----------
COUNT() OVER (ORDER BY hire_date ROWS 3 PRECEDING)
---------- Output ---------
COUNT() OVER (ORDER BY hire_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)
---------- AST ------------
FunctionCall {
    span: Some(
        0..50,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..5,
            ),
            name: "COUNT",
            quote: None,
        },
        args: [],
        params: [],
        window: Some(
            WindowSpec(
                WindowSpec {
                    existing_window_name: None,
                    partition_by: [],
                    order_by: [
                        OrderByExpr {
                            expr: ColumnRef {
                                span: Some(
                                    23..32,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                23..32,
                                            ),
                                            name: "hire_date",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            asc: None,
                            nulls_first: None,
                        },
                    ],
                    window_frame: Some(
                        WindowFrame {
                            units: Rows,
                            start_bound: Preceding(
                                Some(
                                    Literal {
                                        span: Some(
                                            38..39,
                                        ),
                                        lit: UInt64(
                                            3,
                                        ),
                                    },
                                ),
                            ),
                            end_bound: CurrentRow,
                        },
                    ),
                },
            ),
        ),
        lambda: None,
    },
}


---------- Input ----------
ARRAY_APPLY([1,2,3], x -> x + 1)
---------- Output ---------
ARRAY_APPLY([1, 2, 3], x -> (x + 1))
---------- AST ------------
FunctionCall {
    span: Some(
        0..32,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..11,
            ),
            name: "ARRAY_APPLY",
            quote: None,
        },
        args: [
            Array {
                span: Some(
                    12..19,
                ),
                exprs: [
                    Literal {
                        span: Some(
                            13..14,
                        ),
                        lit: UInt64(
                            1,
                        ),
                    },
                    Literal {
                        span: Some(
                            15..16,
                        ),
                        lit: UInt64(
                            2,
                        ),
                    },
                    Literal {
                        span: Some(
                            17..18,
                        ),
                        lit: UInt64(
                            3,
                        ),
                    },
                ],
            },
        ],
        params: [],
        window: None,
        lambda: Some(
            Lambda {
                params: [
                    Identifier {
                        span: Some(
                            21..22,
                        ),
                        name: "x",
                        quote: None,
                    },
                ],
                expr: BinaryOp {
                    span: Some(
                        28..29,
                    ),
                    op: Plus,
                    left: ColumnRef {
                        span: Some(
                            26..27,
                        ),
                        column: ColumnRef {
                            database: None,
                            table: None,
                            column: Name(
                                Identifier {
                                    span: Some(
                                        26..27,
                                    ),
                                    name: "x",
                                    quote: None,
                                },
                            ),
                        },
                    },
                    right: Literal {
                        span: Some(
                            30..31,
                        ),
                        lit: UInt64(
                            1,
                        ),
                    },
                },
            },
        ),
    },
}


---------- Input ----------
ARRAY_FILTER(col, y -> y % 2 = 0)
---------- Output ---------
ARRAY_FILTER(col, y -> ((y % 2) = 0))
---------- AST ------------
FunctionCall {
    span: Some(
        0..33,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..12,
            ),
            name: "ARRAY_FILTER",
            quote: None,
        },
        args: [
            ColumnRef {
                span: Some(
                    13..16,
                ),
                column: ColumnRef {
                    database: None,
                    table: None,
                    column: Name(
                        Identifier {
                            span: Some(
                                13..16,
                            ),
                            name: "col",
                            quote: None,
                        },
                    ),
                },
            },
        ],
        params: [],
        window: None,
        lambda: Some(
            Lambda {
                params: [
                    Identifier {
                        span: Some(
                            18..19,
                        ),
                        name: "y",
                        quote: None,
                    },
                ],
                expr: BinaryOp {
                    span: Some(
                        29..30,
                    ),
                    op: Eq,
                    left: BinaryOp {
                        span: Some(
                            25..26,
                        ),
                        op: Modulo,
                        left: ColumnRef {
                            span: Some(
                                23..24,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            23..24,
                                        ),
                                        name: "y",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        right: Literal {
                            span: Some(
                                27..28,
                            ),
                            lit: UInt64(
                                2,
                            ),
                        },
                    },
                    right: Literal {
                        span: Some(
                            31..32,
                        ),
                        lit: UInt64(
                            0,
                        ),
                    },
                },
            },
        ),
    },
}


---------- Input ----------
(current_timestamp, current_timestamp(), now())
---------- Output ---------
(current_timestamp(), current_timestamp(), now())
---------- AST ------------
Tuple {
    span: Some(
        0..47,
    ),
    exprs: [
        FunctionCall {
            span: Some(
                1..18,
            ),
            func: FunctionCall {
                distinct: false,
                name: Identifier {
                    span: None,
                    name: "current_timestamp",
                    quote: None,
                },
                args: [],
                params: [],
                window: None,
                lambda: None,
            },
        },
        FunctionCall {
            span: Some(
                20..39,
            ),
            func: FunctionCall {
                distinct: false,
                name: Identifier {
                    span: Some(
                        20..37,
                    ),
                    name: "current_timestamp",
                    quote: None,
                },
                args: [],
                params: [],
                window: None,
                lambda: None,
            },
        },
        FunctionCall {
            span: Some(
                41..46,
            ),
            func: FunctionCall {
                distinct: false,
                name: Identifier {
                    span: Some(
                        41..44,
                    ),
                    name: "now",
                    quote: None,
                },
                args: [],
                params: [],
                window: None,
                lambda: None,
            },
        },
    ],
}


---------- Input ----------
ARRAY_REDUCE([1,2,3], (acc,t) -> acc + t)
---------- Output ---------
ARRAY_REDUCE([1, 2, 3], (acc, t) -> (acc + t))
---------- AST ------------
FunctionCall {
    span: Some(
        0..41,
    ),
    func: FunctionCall {
        distinct: false,
        name: Identifier {
            span: Some(
                0..12,
            ),
            name: "ARRAY_REDUCE",
            quote: None,
        },
        args: [
            Array {
                span: Some(
                    13..20,
                ),
                exprs: [
                    Literal {
                        span: Some(
                            14..15,
                        ),
                        lit: UInt64(
                            1,
                        ),
                    },
                    Literal {
                        span: Some(
                            16..17,
                        ),
                        lit: UInt64(
                            2,
                        ),
                    },
                    Literal {
                        span: Some(
                            18..19,
                        ),
                        lit: UInt64(
                            3,
                        ),
                    },
                ],
            },
        ],
        params: [],
        window: None,
        lambda: Some(
            Lambda {
                params: [
                    Identifier {
                        span: Some(
                            23..26,
                        ),
                        name: "acc",
                        quote: None,
                    },
                    Identifier {
                        span: Some(
                            27..28,
                        ),
                        name: "t",
                        quote: None,
                    },
                ],
                expr: BinaryOp {
                    span: Some(
                        37..38,
                    ),
                    op: Plus,
                    left: ColumnRef {
                        span: Some(
                            33..36,
                        ),
                        column: ColumnRef {
                            database: None,
                            table: None,
                            column: Name(
                                Identifier {
                                    span: Some(
                                        33..36,
                                    ),
                                    name: "acc",
                                    quote: None,
                                },
                            ),
                        },
                    },
                    right: ColumnRef {
                        span: Some(
                            39..40,
                        ),
                        column: ColumnRef {
                            database: None,
                            table: None,
                            column: Name(
                                Identifier {
                                    span: Some(
                                        39..40,
                                    ),
                                    name: "t",
                                    quote: None,
                                },
                            ),
                        },
                    },
                },
            },
        ),
    },
}


