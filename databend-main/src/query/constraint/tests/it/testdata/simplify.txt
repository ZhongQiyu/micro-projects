------------------------------------ Input -------------------------------------
a > 0 or true
------------------------------------ Output ------------------------------------
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Gt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
    right: Constant(
        Bool(
            true,
        ),
    ),
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                    NULL_BOOL
                    (ite (> (unwrap-int a) (unwrap-int (JUST_INT 0)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL)
            (= TRUE_BOOL TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                         NULL_BOOL
                         (ite (> (unwrap-int a) (unwrap-int (JUST_INT 0)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= TRUE_BOOL NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[]
---------------------------------- Output MIR ----------------------------------
[]


------------------------------------ Input -------------------------------------
a = 1 and a = 1
------------------------------------ Output ------------------------------------
(a = 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (= a (JUST_INT 1)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a = 1 and a = 2
------------------------------------ Output ------------------------------------
FALSE
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    false,
]
---------------------------------- Output MIR ----------------------------------
[
    Constant(
        Bool(
            false,
        ),
    ),
]


------------------------------------ Input -------------------------------------
a = 1 and a != 1
------------------------------------ Output ------------------------------------
FALSE
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    false,
]
---------------------------------- Output MIR ----------------------------------
[
    Constant(
        Bool(
            false,
        ),
    ),
]


------------------------------------ Input -------------------------------------
a = 1 and a != 2
------------------------------------ Output ------------------------------------
(a = 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    2,
                ),
            ),
        },
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 2) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 2))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (= a (JUST_INT 1)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a = 1 and a < 2 
------------------------------------ Output ------------------------------------
(a = 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 2)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 2)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (= a (JUST_INT 1)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a = 1 and a < 1
------------------------------------ Output ------------------------------------
FALSE
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    false,
]
---------------------------------- Output MIR ----------------------------------
[
    Constant(
        Bool(
            false,
        ),
    ),
]


------------------------------------ Input -------------------------------------
a = 1 and a <= 2
------------------------------------ Output ------------------------------------
(a = 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Lte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 2)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 2)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (= a (JUST_INT 1)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a = 1 and a <= 1
------------------------------------ Output ------------------------------------
(a = 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Lte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (= a (JUST_INT 1)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a = 1 and a > 0
------------------------------------ Output ------------------------------------
(a = 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                    NULL_BOOL
                    (ite (> (unwrap-int a) (unwrap-int (JUST_INT 0)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                         NULL_BOOL
                         (ite (> (unwrap-int a) (unwrap-int (JUST_INT 0)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (= a (JUST_INT 1)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a = 1 and a > 1
------------------------------------ Output ------------------------------------
FALSE
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (> (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (> (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    false,
]
---------------------------------- Output MIR ----------------------------------
[
    Constant(
        Bool(
            false,
        ),
    ),
]


------------------------------------ Input -------------------------------------
a = 1 and a >= 0
------------------------------------ Output ------------------------------------
(a = 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                    NULL_BOOL
                    (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 0)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                         NULL_BOOL
                         (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 0)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (= a (JUST_INT 1)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a = 1 and a >= 1
------------------------------------ Output ------------------------------------
(a = 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (= a (JUST_INT 1)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a != 1 and a = 1
------------------------------------ Output ------------------------------------
FALSE
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    false,
]
---------------------------------- Output MIR ----------------------------------
[
    Constant(
        Bool(
            false,
        ),
    ),
]


------------------------------------ Input -------------------------------------
a != 1 and a = 2
------------------------------------ Output ------------------------------------
(a = 2)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (= a (JUST_INT 2)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a != 1 and a != 1
------------------------------------ Output ------------------------------------
a IS NOT NULL
(NOT (a = 1))
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL)
            (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= a (JUST_INT 1))),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
]


------------------------------------ Input -------------------------------------
a != 1 and a != 2
------------------------------------ Output ------------------------------------
a IS NOT NULL
(NOT (a = 1))
(NOT (a = 2))
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    2,
                ),
            ),
        },
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL)
            (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 2) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 2))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= a (JUST_INT 1))),
    (not (= a (JUST_INT 2))),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    2,
                ),
            ),
        },
    },
]


------------------------------------ Input -------------------------------------
a != 1 and a < 1 
------------------------------------ Output ------------------------------------
a IS NOT NULL
(NOT (a = 1))
(remove_nullable(a) <= 0)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= a (JUST_INT 1))),
    (<= (unwrap-int a) 0),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    BinaryOperator {
        op: Lte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a != 1 and a < 2
------------------------------------ Output ------------------------------------
a IS NOT NULL
(NOT (a = 1))
(remove_nullable(a) <= 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 2)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 2)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= a (JUST_INT 1))),
    (<= (unwrap-int a) 1),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    BinaryOperator {
        op: Lte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a != 1 and a <= 1
------------------------------------ Output ------------------------------------
a IS NOT NULL
(NOT (a = 1))
(remove_nullable(a) <= 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Lte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= a (JUST_INT 1))),
    (<= (unwrap-int a) 1),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    BinaryOperator {
        op: Lte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a != 1 and a <= 2
------------------------------------ Output ------------------------------------
a IS NOT NULL
(NOT (a = 1))
(remove_nullable(a) <= 2)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Lte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 2)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 2)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= a (JUST_INT 1))),
    (<= (unwrap-int a) 2),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    BinaryOperator {
        op: Lte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a != 1 and a > 1
------------------------------------ Output ------------------------------------
a IS NOT NULL
(NOT (a = 1))
(remove_nullable(a) >= 2)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Gt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (> (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (> (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= a (JUST_INT 1))),
    (>= (unwrap-int a) 2),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    BinaryOperator {
        op: Gte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a != 1 and a > 0
------------------------------------ Output ------------------------------------
a IS NOT NULL
(NOT (a = 1))
(remove_nullable(a) >= 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Gt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                    NULL_BOOL
                    (ite (> (unwrap-int a) (unwrap-int (JUST_INT 0)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                         NULL_BOOL
                         (ite (> (unwrap-int a) (unwrap-int (JUST_INT 0)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= a (JUST_INT 1))),
    (>= (unwrap-int a) 1),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    BinaryOperator {
        op: Gte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a != 1 and a >= 1
------------------------------------ Output ------------------------------------
a IS NOT NULL
(NOT (a = 1))
(remove_nullable(a) >= 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Gte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= a (JUST_INT 1))),
    (>= (unwrap-int a) 1),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    BinaryOperator {
        op: Gte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a != 1 and a >= 0
------------------------------------ Output ------------------------------------
a IS NOT NULL
(NOT (a = 1))
(remove_nullable(a) >= 0)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Gte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                    NULL_BOOL
                    (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 0)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                         NULL_BOOL
                         (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 0)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= a (JUST_INT 1))),
    (>= (unwrap-int a) 0),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    BinaryOperator {
        op: Gte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a < 5 and a = 10
------------------------------------ Output ------------------------------------
FALSE
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                5,
            ),
        ),
    },
    right: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                10,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 10)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 10)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    false,
]
---------------------------------- Output MIR ----------------------------------
[
    Constant(
        Bool(
            false,
        ),
    ),
]


------------------------------------ Input -------------------------------------
a < 5 and a = 2
------------------------------------ Output ------------------------------------
(a = 2)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                5,
            ),
        ),
    },
    right: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (= a (JUST_INT 2)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a < 5 and a != 10
------------------------------------ Output ------------------------------------
a IS NOT NULL
(NOT (a = 10))
(remove_nullable(a) <= 4)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                5,
            ),
        ),
    },
    right: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    10,
                ),
            ),
        },
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 10)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 10)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 10)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 10) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 10))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= a (JUST_INT 10))),
    (<= (unwrap-int a) 4),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    10,
                ),
            ),
        },
    },
    BinaryOperator {
        op: Lte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                4,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a < 5 and a != 2
------------------------------------ Output ------------------------------------
a IS NOT NULL
(NOT (a = 2))
(remove_nullable(a) <= 4)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                5,
            ),
        ),
    },
    right: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    2,
                ),
            ),
        },
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 2) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 2))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= a (JUST_INT 2))),
    (<= (unwrap-int a) 4),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    2,
                ),
            ),
        },
    },
    BinaryOperator {
        op: Lte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                4,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a < 5 and a <= 10 
------------------------------------ Output ------------------------------------
a IS NOT NULL
(remove_nullable(a) <= 4)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                5,
            ),
        ),
    },
    right: BinaryOperator {
        op: Lte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                10,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                    NULL_BOOL
                    (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 10)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                         NULL_BOOL
                         (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 10)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (<= (unwrap-int a) 4),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    BinaryOperator {
        op: Lte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                4,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a < 5 and a > 10
------------------------------------ Output ------------------------------------
FALSE
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                5,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                10,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                    NULL_BOOL
                    (ite (> (unwrap-int a) (unwrap-int (JUST_INT 10)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                         NULL_BOOL
                         (ite (> (unwrap-int a) (unwrap-int (JUST_INT 10)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    false,
]
---------------------------------- Output MIR ----------------------------------
[
    Constant(
        Bool(
            false,
        ),
    ),
]


------------------------------------ Input -------------------------------------
a < 5 and a > 2
------------------------------------ Output ------------------------------------
a IS NOT NULL
(remove_nullable(a) >= 3)
(remove_nullable(a) <= 4)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                5,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (> (unwrap-int a) (unwrap-int (JUST_INT 2)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (> (unwrap-int a) (unwrap-int (JUST_INT 2)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (>= (unwrap-int a) 3),
    (<= (unwrap-int a) 4),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    BinaryOperator {
        op: Gte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                3,
            ),
        ),
    },
    BinaryOperator {
        op: Lte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                4,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a <= 1 and a >= 1
------------------------------------ Output ------------------------------------
a IS NOT NULL
(remove_nullable(a) = 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Lte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (= (unwrap-int a) 1),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    BinaryOperator {
        op: Eq,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a = 1 or a = 1
------------------------------------ Output ------------------------------------
(a = 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (= a (JUST_INT 1)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a = 1 or a = 2
------------------------------------ Output ------------------------------------
((a = 1) OR (a = 2))
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (or (= a (JUST_INT 1)) (= a (JUST_INT 2))),
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Or,
        left: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
        right: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    2,
                ),
            ),
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a = 1 or a != 1
------------------------------------ Output ------------------------------------
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a = 1 or a != 2
------------------------------------ Output ------------------------------------
(NOT (a = 2))
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    2,
                ),
            ),
        },
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 2) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 2))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a (JUST_INT 2))),
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    2,
                ),
            ),
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a = 1 or a < 2 
------------------------------------ Output ------------------------------------
a IS NOT NULL
(remove_nullable(a) <= 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 2)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 2)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (<= (unwrap-int a) 1),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    BinaryOperator {
        op: Lte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a = 1 or a < 1
------------------------------------ Output ------------------------------------
((a = 1) OR (1 > remove_nullable(a)))
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (or (= a (JUST_INT 1)) (not (<= 1 (unwrap-int a)))),
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Or,
        left: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
        right: BinaryOperator {
            op: Gt,
            left: Constant(
                Int(
                    1,
                ),
            ),
            right: UnaryOperator {
                op: RemoveNullable,
                arg: Variable {
                    name: "a",
                    data_type: Int,
                },
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a = 1 or a <= 2
------------------------------------ Output ------------------------------------
a IS NOT NULL
(remove_nullable(a) <= 2)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Lte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 2)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 2)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (<= (unwrap-int a) 2),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    BinaryOperator {
        op: Lte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a = 1 or a <= 1
------------------------------------ Output ------------------------------------
a IS NOT NULL
(remove_nullable(a) <= 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Lte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (<= (unwrap-int a) 1),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    BinaryOperator {
        op: Lte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a = 1 or a > 0
------------------------------------ Output ------------------------------------
a IS NOT NULL
(remove_nullable(a) >= 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                    NULL_BOOL
                    (ite (> (unwrap-int a) (unwrap-int (JUST_INT 0)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                         NULL_BOOL
                         (ite (> (unwrap-int a) (unwrap-int (JUST_INT 0)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (>= (unwrap-int a) 1),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    BinaryOperator {
        op: Gte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a = 1 or a > 1
------------------------------------ Output ------------------------------------
((a = 1) OR (remove_nullable(a) > 1))
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (> (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (> (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (or (= a (JUST_INT 1)) (not (<= (unwrap-int a) 1))),
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Or,
        left: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
        right: BinaryOperator {
            op: Gt,
            left: UnaryOperator {
                op: RemoveNullable,
                arg: Variable {
                    name: "a",
                    data_type: Int,
                },
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a = 1 or a >= 0
------------------------------------ Output ------------------------------------
a IS NOT NULL
(remove_nullable(a) >= 0)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                    NULL_BOOL
                    (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 0)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                         NULL_BOOL
                         (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 0)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (>= (unwrap-int a) 0),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    BinaryOperator {
        op: Gte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a = 1 or a >= 1
------------------------------------ Output ------------------------------------
a IS NOT NULL
(remove_nullable(a) >= 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (>= (unwrap-int a) 1),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    BinaryOperator {
        op: Gte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a != 1 or a = 1
------------------------------------ Output ------------------------------------
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a != 1 or a = 2
------------------------------------ Output ------------------------------------
((NOT (a = 1)) OR (a = 2))
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (or (not (= a (JUST_INT 1))) (= a (JUST_INT 2))),
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Or,
        left: UnaryOperator {
            op: Not,
            arg: BinaryOperator {
                op: Eq,
                left: Variable {
                    name: "a",
                    data_type: Int,
                },
                right: Constant(
                    Int(
                        1,
                    ),
                ),
            },
        },
        right: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    2,
                ),
            ),
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a != 1 or a != 1
------------------------------------ Output ------------------------------------
(NOT (a = 1))
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL)
            (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a (JUST_INT 1))),
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a != 1 or a != 2
------------------------------------ Output ------------------------------------
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    2,
                ),
            ),
        },
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL)
            (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 2) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 2))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a != 1 or a < 1 
------------------------------------ Output ------------------------------------
((NOT (a = 1)) OR (1 > remove_nullable(a)))
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (or (not (= a (JUST_INT 1))) (not (<= 1 (unwrap-int a)))),
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Or,
        left: UnaryOperator {
            op: Not,
            arg: BinaryOperator {
                op: Eq,
                left: Variable {
                    name: "a",
                    data_type: Int,
                },
                right: Constant(
                    Int(
                        1,
                    ),
                ),
            },
        },
        right: BinaryOperator {
            op: Gt,
            left: Constant(
                Int(
                    1,
                ),
            ),
            right: UnaryOperator {
                op: RemoveNullable,
                arg: Variable {
                    name: "a",
                    data_type: Int,
                },
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a != 1 or a < 2
------------------------------------ Output ------------------------------------
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 2)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 2)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a != 1 or a <= 1
------------------------------------ Output ------------------------------------
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Lte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a != 1 or a <= 2
------------------------------------ Output ------------------------------------
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Lte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 2)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 2)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a != 1 or a > 1
------------------------------------ Output ------------------------------------
(NOT (a = 1))
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Gt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (> (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (> (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a (JUST_INT 1))),
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a != 1 or a > 0
------------------------------------ Output ------------------------------------
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Gt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                    NULL_BOOL
                    (ite (> (unwrap-int a) (unwrap-int (JUST_INT 0)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                         NULL_BOOL
                         (ite (> (unwrap-int a) (unwrap-int (JUST_INT 0)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a != 1 or a >= 1
------------------------------------ Output ------------------------------------
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Gte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a != 1 or a >= 0
------------------------------------ Output ------------------------------------
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    1,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Gte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                    NULL_BOOL
                    (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 0)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 1)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 1) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 1))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                         NULL_BOOL
                         (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 0)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a < 5 or a = 10
------------------------------------ Output ------------------------------------
((5 > remove_nullable(a)) OR (a = 10))
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                5,
            ),
        ),
    },
    right: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                10,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 10)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 10)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (or (not (<= 5 (unwrap-int a))) (= a (JUST_INT 10))),
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Or,
        left: BinaryOperator {
            op: Gt,
            left: Constant(
                Int(
                    5,
                ),
            ),
            right: UnaryOperator {
                op: RemoveNullable,
                arg: Variable {
                    name: "a",
                    data_type: Int,
                },
            },
        },
        right: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    10,
                ),
            ),
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a < 5 or a = 2
------------------------------------ Output ------------------------------------
((5 > remove_nullable(a)) OR (a = 2))
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                5,
            ),
        ),
    },
    right: BinaryOperator {
        op: Eq,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (or (not (<= 5 (unwrap-int a))) (= a (JUST_INT 2))),
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Or,
        left: BinaryOperator {
            op: Gt,
            left: Constant(
                Int(
                    5,
                ),
            ),
            right: UnaryOperator {
                op: RemoveNullable,
                arg: Variable {
                    name: "a",
                    data_type: Int,
                },
            },
        },
        right: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    2,
                ),
            ),
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a < 5 or a != 10
------------------------------------ Output ------------------------------------
(NOT (a = 10))
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                5,
            ),
        ),
    },
    right: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    10,
                ),
            ),
        },
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 10)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 10)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 10)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 10) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 10))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a (JUST_INT 10))),
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    10,
                ),
            ),
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a < 5 or a != 2
------------------------------------ Output ------------------------------------
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                5,
            ),
        ),
    },
    right: UnaryOperator {
        op: Not,
        arg: BinaryOperator {
            op: Eq,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    2,
                ),
            ),
        },
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                            NULL_BOOL
                            (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                       NULL_BOOL)
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                            TRUE_BOOL)
                         FALSE_BOOL
                         TRUE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                                 NULL_BOOL
                                 (ite (= a (JUST_INT 2)) TRUE_BOOL FALSE_BOOL))
                            NULL_BOOL)
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT)
                                          (= (JUST_INT 2) NULL_INT))
                                      NULL_BOOL
                                      (ite (= a (JUST_INT 2))
                                           TRUE_BOOL
                                           FALSE_BOOL))
                                 TRUE_BOOL)
                              FALSE_BOOL
                              TRUE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a < 5 or a <= 10 
------------------------------------ Output ------------------------------------
a IS NOT NULL
(remove_nullable(a) <= 10)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                5,
            ),
        ),
    },
    right: BinaryOperator {
        op: Lte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                10,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                    NULL_BOOL
                    (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 10)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                         NULL_BOOL
                         (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 10)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (<= (unwrap-int a) 10),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    BinaryOperator {
        op: Lte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                10,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a < 5 or a > 10
------------------------------------ Output ------------------------------------
((5 > remove_nullable(a)) OR (remove_nullable(a) > 10))
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                5,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                10,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                    NULL_BOOL
                    (ite (> (unwrap-int a) (unwrap-int (JUST_INT 10)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 10) NULL_INT))
                         NULL_BOOL
                         (ite (> (unwrap-int a) (unwrap-int (JUST_INT 10)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (or (not (<= 5 (unwrap-int a))) (not (<= (unwrap-int a) 10))),
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    BinaryOperator {
        op: Or,
        left: BinaryOperator {
            op: Gt,
            left: Constant(
                Int(
                    5,
                ),
            ),
            right: UnaryOperator {
                op: RemoveNullable,
                arg: Variable {
                    name: "a",
                    data_type: Int,
                },
            },
        },
        right: BinaryOperator {
            op: Gt,
            left: UnaryOperator {
                op: RemoveNullable,
                arg: Variable {
                    name: "a",
                    data_type: Int,
                },
            },
            right: Constant(
                Int(
                    10,
                ),
            ),
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a < 5 or a > 2
------------------------------------ Output ------------------------------------
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Lt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                5,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                    NULL_BOOL
                    (ite (> (unwrap-int a) (unwrap-int (JUST_INT 2)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 5) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int a) (unwrap-int (JUST_INT 5)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 2) NULL_INT))
                         NULL_BOOL
                         (ite (> (unwrap-int a) (unwrap-int (JUST_INT 2)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a <= 1 or a >= 1
------------------------------------ Output ------------------------------------
a IS NOT NULL
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Or,
    left: BinaryOperator {
        op: Lte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               TRUE_BOOL))
        TRUE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (<= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
]


------------------------------------ Input -------------------------------------
a + b < 1 and a >= 0
------------------------------------ Output ------------------------------------
a IS NOT NULL
b IS NOT NULL
((remove_nullable(a) + remove_nullable(b)) <= 0)
(remove_nullable(a) >= 0)
(remove_nullable(b) <= 0)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Lt,
        left: BinaryOperator {
            op: Plus,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Variable {
                name: "b",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gte,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= (ite (or (= a NULL_INT) (= b NULL_INT))
                                NULL_INT
                                (JUST_INT (+ (unwrap-int a) (unwrap-int b))))
                           NULL_INT)
                        (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int (ite (or (= a NULL_INT) (= b NULL_INT))
                                             NULL_INT
                                             (JUST_INT (+ (unwrap-int a)
                                                          (unwrap-int b)))))
                            (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                    NULL_BOOL
                    (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 0)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= (ite (or (= a NULL_INT) (= b NULL_INT))
                                     NULL_INT
                                     (JUST_INT (+ (unwrap-int a) (unwrap-int b))))
                                NULL_INT)
                             (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int (ite (or (= a NULL_INT)
                                                      (= b NULL_INT))
                                                  NULL_INT
                                                  (JUST_INT (+ (unwrap-int a)
                                                               (unwrap-int b)))))
                                 (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                         NULL_BOOL
                         (ite (>= (unwrap-int a) (unwrap-int (JUST_INT 0)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= b NULL_INT)),
    (<= (+ (unwrap-int a) (unwrap-int b)) 0),
    (>= (unwrap-int a) 0),
    (<= (unwrap-int b) 0),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "b",
                data_type: Int,
            },
        },
    },
    BinaryOperator {
        op: Lte,
        left: BinaryOperator {
            op: Plus,
            left: UnaryOperator {
                op: RemoveNullable,
                arg: Variable {
                    name: "a",
                    data_type: Int,
                },
            },
            right: UnaryOperator {
                op: RemoveNullable,
                arg: Variable {
                    name: "b",
                    data_type: Int,
                },
            },
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
    BinaryOperator {
        op: Gte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
    BinaryOperator {
        op: Lte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "b",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a + b < 1 and a - b >= 0
------------------------------------ Output ------------------------------------
a IS NOT NULL
b IS NOT NULL
((remove_nullable(a) - remove_nullable(b)) >= 0)
((remove_nullable(a) + remove_nullable(b)) <= 0)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Lt,
        left: BinaryOperator {
            op: Plus,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Variable {
                name: "b",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gte,
        left: BinaryOperator {
            op: Minus,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Variable {
                name: "b",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= (ite (or (= a NULL_INT) (= b NULL_INT))
                                NULL_INT
                                (JUST_INT (+ (unwrap-int a) (unwrap-int b))))
                           NULL_INT)
                        (= (JUST_INT 1) NULL_INT))
                    NULL_BOOL
                    (ite (< (unwrap-int (ite (or (= a NULL_INT) (= b NULL_INT))
                                             NULL_INT
                                             (JUST_INT (+ (unwrap-int a)
                                                          (unwrap-int b)))))
                            (unwrap-int (JUST_INT 1)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= (ite (or (= a NULL_INT) (= b NULL_INT))
                                NULL_INT
                                (JUST_INT (- (unwrap-int a) (unwrap-int b))))
                           NULL_INT)
                        (= (JUST_INT 0) NULL_INT))
                    NULL_BOOL
                    (ite (>= (unwrap-int (ite (or (= a NULL_INT) (= b NULL_INT))
                                              NULL_INT
                                              (JUST_INT (- (unwrap-int a)
                                                           (unwrap-int b)))))
                             (unwrap-int (JUST_INT 0)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= (ite (or (= a NULL_INT) (= b NULL_INT))
                                     NULL_INT
                                     (JUST_INT (+ (unwrap-int a) (unwrap-int b))))
                                NULL_INT)
                             (= (JUST_INT 1) NULL_INT))
                         NULL_BOOL
                         (ite (< (unwrap-int (ite (or (= a NULL_INT)
                                                      (= b NULL_INT))
                                                  NULL_INT
                                                  (JUST_INT (+ (unwrap-int a)
                                                               (unwrap-int b)))))
                                 (unwrap-int (JUST_INT 1)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= (ite (or (= a NULL_INT) (= b NULL_INT))
                                     NULL_INT
                                     (JUST_INT (- (unwrap-int a) (unwrap-int b))))
                                NULL_INT)
                             (= (JUST_INT 0) NULL_INT))
                         NULL_BOOL
                         (ite (>= (unwrap-int (ite (or (= a NULL_INT)
                                                       (= b NULL_INT))
                                                   NULL_INT
                                                   (JUST_INT (- (unwrap-int a)
                                                                (unwrap-int b)))))
                                  (unwrap-int (JUST_INT 0)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= b NULL_INT)),
    (>= (+ (unwrap-int a) (* (- 1) (unwrap-int b))) 0),
    (<= (+ (unwrap-int a) (unwrap-int b)) 0),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "b",
                data_type: Int,
            },
        },
    },
    BinaryOperator {
        op: Gte,
        left: BinaryOperator {
            op: Minus,
            left: UnaryOperator {
                op: RemoveNullable,
                arg: Variable {
                    name: "a",
                    data_type: Int,
                },
            },
            right: UnaryOperator {
                op: RemoveNullable,
                arg: Variable {
                    name: "b",
                    data_type: Int,
                },
            },
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
    BinaryOperator {
        op: Lte,
        left: BinaryOperator {
            op: Plus,
            left: UnaryOperator {
                op: RemoveNullable,
                arg: Variable {
                    name: "a",
                    data_type: Int,
                },
            },
            right: UnaryOperator {
                op: RemoveNullable,
                arg: Variable {
                    name: "b",
                    data_type: Int,
                },
            },
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a < a + b
------------------------------------ Output ------------------------------------
a IS NOT NULL
b IS NOT NULL
(remove_nullable(b) >= 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Lt,
    left: Variable {
        name: "a",
        data_type: Int,
    },
    right: BinaryOperator {
        op: Plus,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Variable {
            name: "b",
            data_type: Int,
        },
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= a NULL_INT)
            (= (ite (or (= a NULL_INT) (= b NULL_INT))
                    NULL_INT
                    (JUST_INT (+ (unwrap-int a) (unwrap-int b))))
               NULL_INT))
        NULL_BOOL
        (ite (< (unwrap-int a)
                (unwrap-int (ite (or (= a NULL_INT) (= b NULL_INT))
                                 NULL_INT
                                 (JUST_INT (+ (unwrap-int a) (unwrap-int b))))))
             TRUE_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= b NULL_INT)),
    (>= (unwrap-int b) 1),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "b",
                data_type: Int,
            },
        },
    },
    BinaryOperator {
        op: Gte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "b",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
1 - 30 * a < 20 * a + b
------------------------------------ Output ------------------------------------
a IS NOT NULL
b IS NOT NULL
(((50 * remove_nullable(a)) + remove_nullable(b)) >= 2)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: Lt,
    left: BinaryOperator {
        op: Minus,
        left: Constant(
            Int(
                1,
            ),
        ),
        right: BinaryOperator {
            op: Multiply,
            left: Constant(
                Int(
                    30,
                ),
            ),
            right: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    right: BinaryOperator {
        op: Plus,
        left: BinaryOperator {
            op: Multiply,
            left: Constant(
                Int(
                    20,
                ),
            ),
            right: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Variable {
            name: "b",
            data_type: Int,
        },
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= (JUST_INT 1) NULL_INT)
                        (= (ite (or (= (JUST_INT 30) NULL_INT) (= a NULL_INT))
                                NULL_INT
                                (JUST_INT (* (unwrap-int (JUST_INT 30))
                                             (unwrap-int a))))
                           NULL_INT))
                    NULL_INT
                    (JUST_INT (- (unwrap-int (JUST_INT 1))
                                 (unwrap-int (ite (or (= (JUST_INT 30) NULL_INT)
                                                      (= a NULL_INT))
                                                  NULL_INT
                                                  (JUST_INT (* (unwrap-int (JUST_INT 30))
                                                               (unwrap-int a))))))))
               NULL_INT)
            (= (ite (or (= (ite (or (= (JUST_INT 20) NULL_INT) (= a NULL_INT))
                                NULL_INT
                                (JUST_INT (* (unwrap-int (JUST_INT 20))
                                             (unwrap-int a))))
                           NULL_INT)
                        (= b NULL_INT))
                    NULL_INT
                    (JUST_INT (+ (unwrap-int (ite (or (= (JUST_INT 20) NULL_INT)
                                                      (= a NULL_INT))
                                                  NULL_INT
                                                  (JUST_INT (* (unwrap-int (JUST_INT 20))
                                                               (unwrap-int a)))))
                                 (unwrap-int b))))
               NULL_INT))
        NULL_BOOL
        (ite (< (unwrap-int (ite (or (= (JUST_INT 1) NULL_INT)
                                     (= (ite (or (= (JUST_INT 30) NULL_INT)
                                                 (= a NULL_INT))
                                             NULL_INT
                                             (JUST_INT (* (unwrap-int (JUST_INT 30))
                                                          (unwrap-int a))))
                                        NULL_INT))
                                 NULL_INT
                                 (JUST_INT (- (unwrap-int (JUST_INT 1))
                                              (unwrap-int (ite (or (= (JUST_INT 30)
                                                                      NULL_INT)
                                                                   (= a
                                                                      NULL_INT))
                                                               NULL_INT
                                                               (JUST_INT (* (unwrap-int (JUST_INT 30))
                                                                            (unwrap-int a)))))))))
                (unwrap-int (ite (or (= (ite (or (= (JUST_INT 20) NULL_INT)
                                                 (= a NULL_INT))
                                             NULL_INT
                                             (JUST_INT (* (unwrap-int (JUST_INT 20))
                                                          (unwrap-int a))))
                                        NULL_INT)
                                     (= b NULL_INT))
                                 NULL_INT
                                 (JUST_INT (+ (unwrap-int (ite (or (= (JUST_INT 20)
                                                                      NULL_INT)
                                                                   (= a
                                                                      NULL_INT))
                                                               NULL_INT
                                                               (JUST_INT (* (unwrap-int (JUST_INT 20))
                                                                            (unwrap-int a)))))
                                              (unwrap-int b))))))
             TRUE_BOOL
             FALSE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= b NULL_INT)),
    (>= (+ (* 50 (unwrap-int a)) (unwrap-int b)) 2),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "b",
                data_type: Int,
            },
        },
    },
    BinaryOperator {
        op: Gte,
        left: BinaryOperator {
            op: Plus,
            left: BinaryOperator {
                op: Multiply,
                left: Constant(
                    Int(
                        50,
                    ),
                ),
                right: UnaryOperator {
                    op: RemoveNullable,
                    arg: Variable {
                        name: "a",
                        data_type: Int,
                    },
                },
            },
            right: UnaryOperator {
                op: RemoveNullable,
                arg: Variable {
                    name: "b",
                    data_type: Int,
                },
            },
        },
        right: Constant(
            Int(
                2,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a > 0 and b > 0
------------------------------------ Output ------------------------------------
a IS NOT NULL
b IS NOT NULL
(remove_nullable(a) >= 1)
(remove_nullable(b) >= 1)
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: Gt,
        left: Variable {
            name: "a",
            data_type: Int,
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
    right: BinaryOperator {
        op: Gt,
        left: Variable {
            name: "b",
            data_type: Int,
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                    NULL_BOOL
                    (ite (> (unwrap-int a) (unwrap-int (JUST_INT 0)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= b NULL_INT) (= (JUST_INT 0) NULL_INT))
                    NULL_BOOL
                    (ite (> (unwrap-int b) (unwrap-int (JUST_INT 0)))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                         NULL_BOOL
                         (ite (> (unwrap-int a) (unwrap-int (JUST_INT 0)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= b NULL_INT) (= (JUST_INT 0) NULL_INT))
                         NULL_BOOL
                         (ite (> (unwrap-int b) (unwrap-int (JUST_INT 0)))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    (not (= a NULL_INT)),
    (not (= b NULL_INT)),
    (>= (unwrap-int a) 1),
    (>= (unwrap-int b) 1),
]
---------------------------------- Output MIR ----------------------------------
[
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
    },
    UnaryOperator {
        op: Not,
        arg: UnaryOperator {
            op: IsNull,
            arg: Variable {
                name: "b",
                data_type: Int,
            },
        },
    },
    BinaryOperator {
        op: Gte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "a",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
    BinaryOperator {
        op: Gte,
        left: UnaryOperator {
            op: RemoveNullable,
            arg: Variable {
                name: "b",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                1,
            ),
        ),
    },
]


------------------------------------ Input -------------------------------------
a > 0 and b > 0 and a * b = 0
------------------------------------ Output ------------------------------------
FALSE
---------------------------------- Input MIR -----------------------------------
BinaryOperator {
    op: And,
    left: BinaryOperator {
        op: And,
        left: BinaryOperator {
            op: Gt,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Constant(
                Int(
                    0,
                ),
            ),
        },
        right: BinaryOperator {
            op: Gt,
            left: Variable {
                name: "b",
                data_type: Int,
            },
            right: Constant(
                Int(
                    0,
                ),
            ),
        },
    },
    right: BinaryOperator {
        op: Eq,
        left: BinaryOperator {
            op: Multiply,
            left: Variable {
                name: "a",
                data_type: Int,
            },
            right: Variable {
                name: "b",
                data_type: Int,
            },
        },
        right: Constant(
            Int(
                0,
            ),
        ),
    },
}
--------------------------------- Input Z3 AST ---------------------------------
(= (ite (or (= (ite (or (= (ite (or (= a NULL_INT) (= (JUST_INT 0) NULL_INT))
                                NULL_BOOL
                                (ite (> (unwrap-int a)
                                        (unwrap-int (JUST_INT 0)))
                                     TRUE_BOOL
                                     FALSE_BOOL))
                           FALSE_BOOL)
                        (= (ite (or (= b NULL_INT) (= (JUST_INT 0) NULL_INT))
                                NULL_BOOL
                                (ite (> (unwrap-int b)
                                        (unwrap-int (JUST_INT 0)))
                                     TRUE_BOOL
                                     FALSE_BOOL))
                           FALSE_BOOL))
                    FALSE_BOOL
                    (ite (or (= (ite (or (= a NULL_INT)
                                         (= (JUST_INT 0) NULL_INT))
                                     NULL_BOOL
                                     (ite (> (unwrap-int a)
                                             (unwrap-int (JUST_INT 0)))
                                          TRUE_BOOL
                                          FALSE_BOOL))
                                NULL_BOOL)
                             (= (ite (or (= b NULL_INT)
                                         (= (JUST_INT 0) NULL_INT))
                                     NULL_BOOL
                                     (ite (> (unwrap-int b)
                                             (unwrap-int (JUST_INT 0)))
                                          TRUE_BOOL
                                          FALSE_BOOL))
                                NULL_BOOL))
                         NULL_BOOL
                         TRUE_BOOL))
               FALSE_BOOL)
            (= (ite (or (= (ite (or (= a NULL_INT) (= b NULL_INT))
                                NULL_INT
                                (JUST_INT (* (unwrap-int a) (unwrap-int b))))
                           NULL_INT)
                        (= (JUST_INT 0) NULL_INT))
                    NULL_BOOL
                    (ite (= (ite (or (= a NULL_INT) (= b NULL_INT))
                                 NULL_INT
                                 (JUST_INT (* (unwrap-int a) (unwrap-int b))))
                            (JUST_INT 0))
                         TRUE_BOOL
                         FALSE_BOOL))
               FALSE_BOOL))
        FALSE_BOOL
        (ite (or (= (ite (or (= (ite (or (= a NULL_INT)
                                         (= (JUST_INT 0) NULL_INT))
                                     NULL_BOOL
                                     (ite (> (unwrap-int a)
                                             (unwrap-int (JUST_INT 0)))
                                          TRUE_BOOL
                                          FALSE_BOOL))
                                FALSE_BOOL)
                             (= (ite (or (= b NULL_INT)
                                         (= (JUST_INT 0) NULL_INT))
                                     NULL_BOOL
                                     (ite (> (unwrap-int b)
                                             (unwrap-int (JUST_INT 0)))
                                          TRUE_BOOL
                                          FALSE_BOOL))
                                FALSE_BOOL))
                         FALSE_BOOL
                         (ite (or (= (ite (or (= a NULL_INT)
                                              (= (JUST_INT 0) NULL_INT))
                                          NULL_BOOL
                                          (ite (> (unwrap-int a)
                                                  (unwrap-int (JUST_INT 0)))
                                               TRUE_BOOL
                                               FALSE_BOOL))
                                     NULL_BOOL)
                                  (= (ite (or (= b NULL_INT)
                                              (= (JUST_INT 0) NULL_INT))
                                          NULL_BOOL
                                          (ite (> (unwrap-int b)
                                                  (unwrap-int (JUST_INT 0)))
                                               TRUE_BOOL
                                               FALSE_BOOL))
                                     NULL_BOOL))
                              NULL_BOOL
                              TRUE_BOOL))
                    NULL_BOOL)
                 (= (ite (or (= (ite (or (= a NULL_INT) (= b NULL_INT))
                                     NULL_INT
                                     (JUST_INT (* (unwrap-int a) (unwrap-int b))))
                                NULL_INT)
                             (= (JUST_INT 0) NULL_INT))
                         NULL_BOOL
                         (ite (= (ite (or (= a NULL_INT) (= b NULL_INT))
                                      NULL_INT
                                      (JUST_INT (* (unwrap-int a)
                                                   (unwrap-int b))))
                                 (JUST_INT 0))
                              TRUE_BOOL
                              FALSE_BOOL))
                    NULL_BOOL))
             NULL_BOOL
             TRUE_BOOL))
   TRUE_BOOL)
-------------------------------- Output Z3 AST ---------------------------------
[
    false,
]
---------------------------------- Output MIR ----------------------------------
[
    Constant(
        Bool(
            false,
        ),
    ),
]


