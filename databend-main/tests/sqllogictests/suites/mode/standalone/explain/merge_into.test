statement ok
set enable_experimental_merge_into = 1;

statement ok
CREATE TABLE employees2 (employee_id INT, employee_name VARCHAR(255),department VARCHAR(255));

statement ok
CREATE TABLE salaries2 (employee_id INT,salary DECIMAL(10, 2));

statement ok
INSERT INTO employees2 VALUES(1, 'Alice', 'HR'),(2, 'Bob', 'IT'),(3, 'Charlie', 'Finance'),(4, 'David', 'HR');

statement ok
INSERT INTO salaries2 VALUES(1, 50000.00),(2, 60000.00);

query TT
MERGE INTO salaries2 USING (SELECT * FROM employees2) as employees2 ON salaries2.employee_id = employees2.employee_id WHEN MATCHED AND employees2.department = 'HR' THEN UPDATE SET salaries2.salary = salaries2.salary + 1000.00 WHEN MATCHED THEN UPDATE SET salaries2.salary = salaries2.salary + 500.00 WHEN NOT MATCHED THEN INSERT (employee_id, salary) VALUES (employees2.employee_id, 55000.00);
----
2 2

query T
explain MERGE INTO salaries2 USING (SELECT * FROM employees2) as employees2 ON salaries2.employee_id = employees2.employee_id WHEN MATCHED AND employees2.department = 'HR' THEN UPDATE SET salaries2.salary = salaries2.salary + 1000.00 WHEN MATCHED THEN UPDATE SET salaries2.salary = salaries2.salary + 500.00 WHEN NOT MATCHED THEN INSERT (employee_id, salary) VALUES (employees2.employee_id, 55000.00);
----
MergeInto:
target_table: default.default.salaries2
├── distributed: false
├── target_build_optimization: false
├── can_try_update_column_only: false
├── matched update: [condition: eq(employees2.department (#2), 'HR'),update set salary = plus(salaries2.salary (#4), 1000.00)]
├── matched update: [condition: None,update set salary = plus(salaries2.salary (#4), 500.00)]
├── unmatched insert: [condition: None,insert into (employee_id,salary) values(CAST(employees2.employee_id (#0) AS Int32 NULL),CAST(55000.00 AS Decimal(10, 2) NULL))]
└── Join(Left)
    ├── build keys: [salaries2.employee_id (#3)]
    ├── probe keys: [employees2.employee_id (#0)]
    ├── other filters: []
    ├── EvalScalar
    │   ├── scalars: [employees2.employee_id (#0) AS (#0), employees2.employee_name (#1) AS (#1), employees2.department (#2) AS (#2)]
    │   └── Scan
    │       ├── table: default.employees2
    │       ├── filters: []
    │       ├── order by: []
    │       └── limit: NONE
    └── Scan
        ├── table: default.salaries2
        ├── filters: []
        ├── order by: []
        └── limit: NONE

statement ok
INSERT INTO salaries2 VALUES(1, 50000.00),(2, 60000.00);

query T
explain MERGE INTO salaries2 USING (SELECT * FROM employees2) as employees2 ON salaries2.employee_id = employees2.employee_id WHEN MATCHED AND employees2.department = 'HR' THEN UPDATE SET salaries2.salary = salaries2.salary + 1000.00 WHEN MATCHED THEN UPDATE SET salaries2.salary = salaries2.salary + 500.00 WHEN NOT MATCHED THEN INSERT (employee_id, salary) VALUES (employees2.employee_id, 55000.00);
----
MergeInto:
target_table: default.default.salaries2
├── distributed: false
├── target_build_optimization: false
├── can_try_update_column_only: false
├── matched update: [condition: eq(employees2.department (#2), 'HR'),update set salary = plus(salaries2.salary (#4), 1000.00)]
├── matched update: [condition: None,update set salary = plus(salaries2.salary (#4), 500.00)]
├── unmatched insert: [condition: None,insert into (employee_id,salary) values(CAST(employees2.employee_id (#0) AS Int32 NULL),CAST(55000.00 AS Decimal(10, 2) NULL))]
└── Join(Right)
    ├── build keys: [employees2.employee_id (#0)]
    ├── probe keys: [salaries2.employee_id (#3)]
    ├── other filters: []
    ├── Scan
    │   ├── table: default.salaries2
    │   ├── filters: []
    │   ├── order by: []
    │   └── limit: NONE
    └── EvalScalar
        ├── scalars: [employees2.employee_id (#0) AS (#0), employees2.employee_name (#1) AS (#1), employees2.department (#2) AS (#2)]
        └── Scan
            ├── table: default.employees2
            ├── filters: []
            ├── order by: []
            └── limit: NONE

## test update column only optimization
statement ok
drop table if exists column_only_optimization_target;

statement ok
drop table if exists column_only_optimization_source;

statement ok
create table column_only_optimization_target(a int,b string);

statement ok
create table column_only_optimization_source(a int,b string);

query T
explain MERGE INTO column_only_optimization_target as t1 using column_only_optimization_source as t2
on t1.a = t2.a when matched then update set t1.b = t2.b when not matched then insert *;
----
MergeInto:
target_table: default.default.column_only_optimization_target
├── distributed: false
├── target_build_optimization: true
├── can_try_update_column_only: true
├── matched update: [condition: None,update set b = t2.b (#1)]
├── unmatched insert: [condition: None,insert into (a,b) values(CAST(a (#0) AS Int32 NULL),CAST(b (#1) AS String NULL))]
└── Join(Left)
    ├── build keys: [t1.a (#2)]
    ├── probe keys: [t2.a (#0)]
    ├── other filters: []
    ├── Scan
    │   ├── table: default.column_only_optimization_source
    │   ├── filters: []
    │   ├── order by: []
    │   └── limit: NONE
    └── Scan
        ├── table: default.column_only_optimization_target
        ├── filters: []
        ├── order by: []
        └── limit: NONE

query T
explain MERGE INTO column_only_optimization_target as t1 using column_only_optimization_source as t2
on t1.a = t2.a when matched then update * when not matched then insert *;
----
MergeInto:
target_table: default.default.column_only_optimization_target
├── distributed: false
├── target_build_optimization: true
├── can_try_update_column_only: true
├── matched update: [condition: None,update set a = a (#0),b = b (#1)]
├── unmatched insert: [condition: None,insert into (a,b) values(CAST(a (#0) AS Int32 NULL),CAST(b (#1) AS String NULL))]
└── Join(Left)
    ├── build keys: [t1.a (#2)]
    ├── probe keys: [t2.a (#0)]
    ├── other filters: []
    ├── Scan
    │   ├── table: default.column_only_optimization_source
    │   ├── filters: []
    │   ├── order by: []
    │   └── limit: NONE
    └── Scan
        ├── table: default.column_only_optimization_target
        ├── filters: []
        ├── order by: []
        └── limit: NONE

query T
explain MERGE INTO column_only_optimization_target as t1 using column_only_optimization_source as t2
on t1.a = t2.a when matched then update set t1.b = 'test' when not matched then insert *;
----
MergeInto:
target_table: default.default.column_only_optimization_target
├── distributed: false
├── target_build_optimization: true
├── can_try_update_column_only: false
├── matched update: [condition: None,update set b = 'test']
├── unmatched insert: [condition: None,insert into (a,b) values(CAST(a (#0) AS Int32 NULL),CAST(b (#1) AS String NULL))]
└── Join(Left)
    ├── build keys: [t1.a (#2)]
    ├── probe keys: [t2.a (#0)]
    ├── other filters: []
    ├── Scan
    │   ├── table: default.column_only_optimization_source
    │   ├── filters: []
    │   ├── order by: []
    │   └── limit: NONE
    └── Scan
        ├── table: default.column_only_optimization_target
        ├── filters: []
        ├── order by: []
        └── limit: NONE

query T
explain MERGE INTO column_only_optimization_target as t1 using column_only_optimization_source as t2
on t1.a = t2.a when matched then update set t1.b = concat(t2.b,'test') when not matched then insert *;
----
MergeInto:
target_table: default.default.column_only_optimization_target
├── distributed: false
├── target_build_optimization: true
├── can_try_update_column_only: false
├── matched update: [condition: None,update set b = concat(t2.b (#1), 'test')]
├── unmatched insert: [condition: None,insert into (a,b) values(CAST(a (#0) AS Int32 NULL),CAST(b (#1) AS String NULL))]
└── Join(Left)
    ├── build keys: [t1.a (#2)]
    ├── probe keys: [t2.a (#0)]
    ├── other filters: []
    ├── Scan
    │   ├── table: default.column_only_optimization_source
    │   ├── filters: []
    │   ├── order by: []
    │   └── limit: NONE
    └── Scan
        ├── table: default.column_only_optimization_target
        ├── filters: []
        ├── order by: []
        └── limit: NONE

statement ok
set enable_experimental_merge_into = 0;

statement ok
drop table employees2;

statement ok
drop table salaries2;
